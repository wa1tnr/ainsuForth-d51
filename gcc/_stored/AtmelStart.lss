
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000460c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00010004  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010004  2**0
                  CONTENTS
  4 .bss          0000002c  20000004  00004610  00010004  2**2
                  ALLOC
  5 .stack        0000c000  20000030  0000463c  00010004  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  7 .comment      00000058  00000000  00000000  00010032  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004a5f  00000000  00000000  0001008a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000009b4  00000000  00000000  00014ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000148  00000000  00000000  0001549d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000155e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001e78  00000000  00000000  000156fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002a06  00000000  00000000  00017575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000dcb7d  00000000  00000000  00019f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000248  00000000  00000000  000f6af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000278  00000000  00000000  000f6d40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_sfixed>:
    4000:	2000c030 	.word	0x2000c030
    4004:	0000435d 	.word	0x0000435d
    4008:	00004359 	.word	0x00004359
    400c:	00004359 	.word	0x00004359
    4010:	00004359 	.word	0x00004359
    4014:	00004359 	.word	0x00004359
    4018:	00004359 	.word	0x00004359
	...
    402c:	00004359 	.word	0x00004359
    4030:	00004359 	.word	0x00004359
    4034:	00000000 	.word	0x00000000
    4038:	00004359 	.word	0x00004359
    403c:	00004359 	.word	0x00004359
    4040:	00004359 	.word	0x00004359
    4044:	00004359 	.word	0x00004359
    4048:	00004359 	.word	0x00004359
    404c:	00004359 	.word	0x00004359
    4050:	00004359 	.word	0x00004359
    4054:	00004359 	.word	0x00004359
    4058:	00004359 	.word	0x00004359
    405c:	00004359 	.word	0x00004359
    4060:	00004359 	.word	0x00004359
    4064:	00004359 	.word	0x00004359
    4068:	00004359 	.word	0x00004359
    406c:	00004359 	.word	0x00004359
    4070:	00004359 	.word	0x00004359
    4074:	00004359 	.word	0x00004359
    4078:	00004359 	.word	0x00004359
    407c:	00004359 	.word	0x00004359
    4080:	00004359 	.word	0x00004359
    4084:	00004359 	.word	0x00004359
    4088:	00004359 	.word	0x00004359
    408c:	00004359 	.word	0x00004359
    4090:	00004359 	.word	0x00004359
    4094:	00004359 	.word	0x00004359
    4098:	00004359 	.word	0x00004359
    409c:	00004359 	.word	0x00004359
    40a0:	00004359 	.word	0x00004359
    40a4:	00004359 	.word	0x00004359
    40a8:	00004359 	.word	0x00004359
    40ac:	00004359 	.word	0x00004359
    40b0:	00004359 	.word	0x00004359
    40b4:	00004359 	.word	0x00004359
    40b8:	00004359 	.word	0x00004359
    40bc:	00004359 	.word	0x00004359
    40c0:	00004359 	.word	0x00004359
    40c4:	00004359 	.word	0x00004359
    40c8:	00004359 	.word	0x00004359
    40cc:	00004359 	.word	0x00004359
    40d0:	00004359 	.word	0x00004359
    40d4:	00004359 	.word	0x00004359
    40d8:	00004359 	.word	0x00004359
    40dc:	00004359 	.word	0x00004359
    40e0:	00004359 	.word	0x00004359
    40e4:	00004359 	.word	0x00004359
    40e8:	00004359 	.word	0x00004359
    40ec:	00004359 	.word	0x00004359
    40f0:	00000000 	.word	0x00000000
    40f4:	00004321 	.word	0x00004321
    40f8:	00004359 	.word	0x00004359
    40fc:	00004359 	.word	0x00004359
    4100:	00004359 	.word	0x00004359
    4104:	00004359 	.word	0x00004359
    4108:	00004359 	.word	0x00004359
    410c:	00004359 	.word	0x00004359
    4110:	00004359 	.word	0x00004359
    4114:	00004359 	.word	0x00004359
    4118:	00004359 	.word	0x00004359
    411c:	00004359 	.word	0x00004359
    4120:	00004359 	.word	0x00004359
    4124:	00004359 	.word	0x00004359
    4128:	00004359 	.word	0x00004359
    412c:	00004359 	.word	0x00004359
    4130:	00004359 	.word	0x00004359
    4134:	00004359 	.word	0x00004359
    4138:	00004359 	.word	0x00004359
    413c:	00004359 	.word	0x00004359
    4140:	00004359 	.word	0x00004359
    4144:	00004359 	.word	0x00004359
    4148:	00004359 	.word	0x00004359
    414c:	00004359 	.word	0x00004359
    4150:	00004359 	.word	0x00004359
    4154:	00004359 	.word	0x00004359
	...
    4180:	00004359 	.word	0x00004359
    4184:	00004359 	.word	0x00004359
    4188:	00004359 	.word	0x00004359
    418c:	00004359 	.word	0x00004359
    4190:	00000000 	.word	0x00000000
    4194:	00004359 	.word	0x00004359
    4198:	00004359 	.word	0x00004359
    419c:	00004359 	.word	0x00004359
    41a0:	00004359 	.word	0x00004359
    41a4:	00004359 	.word	0x00004359
    41a8:	00004359 	.word	0x00004359
    41ac:	00004359 	.word	0x00004359
    41b0:	00004359 	.word	0x00004359
    41b4:	00004359 	.word	0x00004359
    41b8:	00004359 	.word	0x00004359
    41bc:	00004359 	.word	0x00004359
    41c0:	00004359 	.word	0x00004359
    41c4:	00004359 	.word	0x00004359
    41c8:	00004359 	.word	0x00004359
    41cc:	00004359 	.word	0x00004359
    41d0:	00004359 	.word	0x00004359
    41d4:	00004359 	.word	0x00004359
    41d8:	00004359 	.word	0x00004359
    41dc:	00004359 	.word	0x00004359
    41e0:	00004359 	.word	0x00004359
    41e4:	00004359 	.word	0x00004359
    41e8:	00004359 	.word	0x00004359
    41ec:	00004359 	.word	0x00004359
    41f0:	00004359 	.word	0x00004359
    41f4:	00004359 	.word	0x00004359
    41f8:	00004359 	.word	0x00004359
    41fc:	00004359 	.word	0x00004359
    4200:	00004359 	.word	0x00004359
	...
    420c:	00004359 	.word	0x00004359
    4210:	00004359 	.word	0x00004359
    4214:	00004359 	.word	0x00004359
    4218:	00004359 	.word	0x00004359
    421c:	00004359 	.word	0x00004359
    4220:	00004359 	.word	0x00004359
    4224:	00004359 	.word	0x00004359
    4228:	00004359 	.word	0x00004359
    422c:	00004359 	.word	0x00004359
    4230:	00004359 	.word	0x00004359
    4234:	00004359 	.word	0x00004359
    4238:	00004359 	.word	0x00004359
    423c:	00004359 	.word	0x00004359
    4240:	00004359 	.word	0x00004359
    4244:	00004359 	.word	0x00004359
    4248:	00004359 	.word	0x00004359
    424c:	00004359 	.word	0x00004359
    4250:	00004359 	.word	0x00004359
    4254:	00004359 	.word	0x00004359
    4258:	00004359 	.word	0x00004359
    425c:	00004359 	.word	0x00004359
    4260:	00000000 	.word	0x00000000

00004264 <deregister_tm_clones>:
    4264:	b508      	push	{r3, lr}
    4266:	4805      	ldr	r0, [pc, #20]	; (427c <deregister_tm_clones+0x18>)
    4268:	4b05      	ldr	r3, [pc, #20]	; (4280 <deregister_tm_clones+0x1c>)
    426a:	1a1b      	subs	r3, r3, r0
    426c:	2b06      	cmp	r3, #6
    426e:	d800      	bhi.n	4272 <deregister_tm_clones+0xe>
    4270:	bd08      	pop	{r3, pc}
    4272:	4b04      	ldr	r3, [pc, #16]	; (4284 <deregister_tm_clones+0x20>)
    4274:	2b00      	cmp	r3, #0
    4276:	d0fb      	beq.n	4270 <deregister_tm_clones+0xc>
    4278:	4798      	blx	r3
    427a:	e7f9      	b.n	4270 <deregister_tm_clones+0xc>
    427c:	0000460c 	.word	0x0000460c
    4280:	0000460f 	.word	0x0000460f
    4284:	00000000 	.word	0x00000000

00004288 <register_tm_clones>:
    4288:	b508      	push	{r3, lr}
    428a:	4807      	ldr	r0, [pc, #28]	; (42a8 <register_tm_clones+0x20>)
    428c:	4b07      	ldr	r3, [pc, #28]	; (42ac <register_tm_clones+0x24>)
    428e:	1a1b      	subs	r3, r3, r0
    4290:	109b      	asrs	r3, r3, #2
    4292:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    4296:	1059      	asrs	r1, r3, #1
    4298:	d100      	bne.n	429c <register_tm_clones+0x14>
    429a:	bd08      	pop	{r3, pc}
    429c:	4a04      	ldr	r2, [pc, #16]	; (42b0 <register_tm_clones+0x28>)
    429e:	2a00      	cmp	r2, #0
    42a0:	d0fb      	beq.n	429a <register_tm_clones+0x12>
    42a2:	4790      	blx	r2
    42a4:	e7f9      	b.n	429a <register_tm_clones+0x12>
    42a6:	bf00      	nop
    42a8:	0000460c 	.word	0x0000460c
    42ac:	0000460c 	.word	0x0000460c
    42b0:	00000000 	.word	0x00000000

000042b4 <__do_global_dtors_aux>:
    42b4:	b510      	push	{r4, lr}
    42b6:	4c06      	ldr	r4, [pc, #24]	; (42d0 <__do_global_dtors_aux+0x1c>)
    42b8:	7823      	ldrb	r3, [r4, #0]
    42ba:	b943      	cbnz	r3, 42ce <__do_global_dtors_aux+0x1a>
    42bc:	f7ff ffd2 	bl	4264 <deregister_tm_clones>
    42c0:	4b04      	ldr	r3, [pc, #16]	; (42d4 <__do_global_dtors_aux+0x20>)
    42c2:	b113      	cbz	r3, 42ca <__do_global_dtors_aux+0x16>
    42c4:	4804      	ldr	r0, [pc, #16]	; (42d8 <__do_global_dtors_aux+0x24>)
    42c6:	f3af 8000 	nop.w
    42ca:	2301      	movs	r3, #1
    42cc:	7023      	strb	r3, [r4, #0]
    42ce:	bd10      	pop	{r4, pc}
    42d0:	20000004 	.word	0x20000004
    42d4:	00000000 	.word	0x00000000
    42d8:	0000460c 	.word	0x0000460c

000042dc <frame_dummy>:
    42dc:	b508      	push	{r3, lr}
    42de:	4b07      	ldr	r3, [pc, #28]	; (42fc <frame_dummy+0x20>)
    42e0:	b11b      	cbz	r3, 42ea <frame_dummy+0xe>
    42e2:	4807      	ldr	r0, [pc, #28]	; (4300 <frame_dummy+0x24>)
    42e4:	4907      	ldr	r1, [pc, #28]	; (4304 <frame_dummy+0x28>)
    42e6:	f3af 8000 	nop.w
    42ea:	4807      	ldr	r0, [pc, #28]	; (4308 <frame_dummy+0x2c>)
    42ec:	6803      	ldr	r3, [r0, #0]
    42ee:	b113      	cbz	r3, 42f6 <frame_dummy+0x1a>
    42f0:	4b06      	ldr	r3, [pc, #24]	; (430c <frame_dummy+0x30>)
    42f2:	b103      	cbz	r3, 42f6 <frame_dummy+0x1a>
    42f4:	4798      	blx	r3
    42f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42fa:	e7c5      	b.n	4288 <register_tm_clones>
    42fc:	00000000 	.word	0x00000000
    4300:	0000460c 	.word	0x0000460c
    4304:	20000008 	.word	0x20000008
    4308:	0000460c 	.word	0x0000460c
    430c:	00000000 	.word	0x00000000

00004310 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    4310:	4b01      	ldr	r3, [pc, #4]	; (4318 <SystemInit+0x8>)
    4312:	4a02      	ldr	r2, [pc, #8]	; (431c <SystemInit+0xc>)
    4314:	601a      	str	r2, [r3, #0]
    4316:	4770      	bx	lr
    4318:	20000000 	.word	0x20000000
    431c:	02dc6c00 	.word	0x02dc6c00

00004320 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    4320:	b507      	push	{r0, r1, r2, lr}
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    4322:	4a0b      	ldr	r2, [pc, #44]	; (4350 <RAMECC_Handler+0x30>)
    4324:	7893      	ldrb	r3, [r2, #2]
    4326:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    4328:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    432a:	9b01      	ldr	r3, [sp, #4]
    432c:	0799      	lsls	r1, r3, #30
    432e:	d502      	bpl.n	4336 <RAMECC_Handler+0x16>
    4330:	4b08      	ldr	r3, [pc, #32]	; (4354 <RAMECC_Handler+0x34>)
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	b933      	cbnz	r3, 4344 <RAMECC_Handler+0x24>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    4336:	9b01      	ldr	r3, [sp, #4]
    4338:	07db      	lsls	r3, r3, #31
    433a:	d505      	bpl.n	4348 <RAMECC_Handler+0x28>
    433c:	4b05      	ldr	r3, [pc, #20]	; (4354 <RAMECC_Handler+0x34>)
    433e:	685b      	ldr	r3, [r3, #4]
    4340:	b113      	cbz	r3, 4348 <RAMECC_Handler+0x28>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    4342:	4a03      	ldr	r2, [pc, #12]	; (4350 <RAMECC_Handler+0x30>)
    4344:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    4346:	4798      	blx	r3
	} else {
		return;
	}
}
    4348:	b003      	add	sp, #12
    434a:	f85d fb04 	ldr.w	pc, [sp], #4
    434e:	bf00      	nop
    4350:	41020000 	.word	0x41020000
    4354:	20000020 	.word	0x20000020

00004358 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4358:	e7fe      	b.n	4358 <Dummy_Handler>
	...

0000435c <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc  = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    435c:	4b16      	ldr	r3, [pc, #88]	; (43b8 <Reset_Handler+0x5c>)
    435e:	4a17      	ldr	r2, [pc, #92]	; (43bc <Reset_Handler+0x60>)
    4360:	4293      	cmp	r3, r2
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4362:	b510      	push	{r4, lr}
    4364:	461c      	mov	r4, r3

	/* Initialize the relocate segment */
	pSrc  = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    4366:	d001      	beq.n	436c <Reset_Handler+0x10>
    4368:	2300      	movs	r3, #0
    436a:	e001      	b.n	4370 <Reset_Handler+0x14>
    436c:	4b14      	ldr	r3, [pc, #80]	; (43c0 <Reset_Handler+0x64>)
    436e:	e007      	b.n	4380 <Reset_Handler+0x24>
		for (; pDest < &_erelocate;) {
    4370:	4914      	ldr	r1, [pc, #80]	; (43c4 <Reset_Handler+0x68>)
    4372:	18d0      	adds	r0, r2, r3
    4374:	4288      	cmp	r0, r1
    4376:	d2f9      	bcs.n	436c <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
    4378:	58e1      	ldr	r1, [r4, r3]
    437a:	50d1      	str	r1, [r2, r3]
    437c:	3304      	adds	r3, #4
    437e:	e7f7      	b.n	4370 <Reset_Handler+0x14>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    4380:	4a11      	ldr	r2, [pc, #68]	; (43c8 <Reset_Handler+0x6c>)
    4382:	4293      	cmp	r3, r2
    4384:	d203      	bcs.n	438e <Reset_Handler+0x32>
		*pDest++ = 0;
    4386:	2200      	movs	r2, #0
    4388:	f843 2b04 	str.w	r2, [r3], #4
    438c:	e7f8      	b.n	4380 <Reset_Handler+0x24>
	}

	/* Set the vector table base address */
	pSrc      = (uint32_t *)&_sfixed;
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    438e:	4a0f      	ldr	r2, [pc, #60]	; (43cc <Reset_Handler+0x70>)
    4390:	4b0f      	ldr	r3, [pc, #60]	; (43d0 <Reset_Handler+0x74>)
    4392:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4396:	609a      	str	r2, [r3, #8]

#if __FPU_USED
	/* Enable FPU */
	SCB->CPACR |= (0xFu << 20);
    4398:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    439c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    43a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    43a4:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    43a8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif

	/* Initialize the C library */
	__libc_init_array();
    43ac:	4b09      	ldr	r3, [pc, #36]	; (43d4 <Reset_Handler+0x78>)
    43ae:	4798      	blx	r3

	/* Branch to main function */
	main();
    43b0:	4b09      	ldr	r3, [pc, #36]	; (43d8 <Reset_Handler+0x7c>)
    43b2:	4798      	blx	r3
    43b4:	e7fe      	b.n	43b4 <Reset_Handler+0x58>
    43b6:	bf00      	nop
    43b8:	0000460c 	.word	0x0000460c
    43bc:	20000000 	.word	0x20000000
    43c0:	20000004 	.word	0x20000004
    43c4:	20000004 	.word	0x20000004
    43c8:	20000030 	.word	0x20000030
    43cc:	00004000 	.word	0x00004000
    43d0:	e000ed00 	.word	0xe000ed00
    43d4:	000045a1 	.word	0x000045a1
    43d8:	00004541 	.word	0x00004541

000043dc <uSec>:
#include "uartport.h"
#include "hardware.h"

/* Many changes: by wa1tnr, July 2018 */

void uSec(void) {
    43dc:	b082      	sub	sp, #8
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    43de:	2301      	movs	r3, #1
    43e0:	9301      	str	r3, [sp, #4]
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	2b01      	cmp	r3, #1
    43e6:	dc02      	bgt.n	43ee <uSec+0x12>
    43e8:	9b01      	ldr	r3, [sp, #4]
    43ea:	3301      	adds	r3, #1
    43ec:	e7f8      	b.n	43e0 <uSec+0x4>
        // nothing
    }
}
    43ee:	b002      	add	sp, #8
    43f0:	4770      	bx	lr
	...

000043f4 <short_timer>:


void short_timer(void) { // human blinkie timescale
    43f4:	b538      	push	{r3, r4, r5, lr}
    43f6:	4c05      	ldr	r4, [pc, #20]	; (440c <short_timer+0x18>)
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(int j = 2; j>0; j--) {
        for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
            uSec();
    43f8:	4d05      	ldr	r5, [pc, #20]	; (4410 <short_timer+0x1c>)
    43fa:	47a8      	blx	r5


void short_timer(void) { // human blinkie timescale
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(int j = 2; j>0; j--) {
        for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
    43fc:	3c01      	subs	r4, #1
    43fe:	d1fb      	bne.n	43f8 <short_timer+0x4>
    4400:	4c02      	ldr	r4, [pc, #8]	; (440c <short_timer+0x18>)
            uSec();
    4402:	47a8      	blx	r5


void short_timer(void) { // human blinkie timescale
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(int j = 2; j>0; j--) {
        for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
    4404:	3c01      	subs	r4, #1
    4406:	d1fc      	bne.n	4402 <short_timer+0xe>
            uSec();
        }
    }
}
    4408:	bd38      	pop	{r3, r4, r5, pc}
    440a:	bf00      	nop
    440c:	0020a7d0 	.word	0x0020a7d0
    4410:	000043dd 	.word	0x000043dd

00004414 <flicker_LED>:
    short_timer(); // should be first instance of use of this timer
    lower_LED_pins(); // lower_D13(); lower_D12();
    short_timer();
}

void flicker_LED(void) {
    4414:	b510      	push	{r4, lr}
}

void raise_LED_pins(void) { // multiple target boards
    // raise_D13(); raise_D12();
    // raise_D13_metro();   // Metro M4 Express
    raise_D13_feather(); // Feather M4 Express
    4416:	4b04      	ldr	r3, [pc, #16]	; (4428 <flicker_LED+0x14>)
    short_timer();
}

void flicker_LED(void) {
    raise_LED_pins(); // raise_D13(); raise_D12();
    short_timer();
    4418:	4c04      	ldr	r4, [pc, #16]	; (442c <flicker_LED+0x18>)
}

void raise_LED_pins(void) { // multiple target boards
    // raise_D13(); raise_D12();
    // raise_D13_metro();   // Metro M4 Express
    raise_D13_feather(); // Feather M4 Express
    441a:	4798      	blx	r3
    short_timer();
}

void flicker_LED(void) {
    raise_LED_pins(); // raise_D13(); raise_D12();
    short_timer();
    441c:	47a0      	blx	r4
}

void lower_LED_pins(void) {
    // lower_D13(); lower_D12();
    // lower_D13_metro();
    lower_D13_feather();
    441e:	4b04      	ldr	r3, [pc, #16]	; (4430 <flicker_LED+0x1c>)
    4420:	4798      	blx	r3

void flicker_LED(void) {
    raise_LED_pins(); // raise_D13(); raise_D12();
    short_timer();
    lower_LED_pins(); // lower_D13(); lower_D12();
    short_timer();
    4422:	47a0      	blx	r4
    4424:	bd10      	pop	{r4, pc}
    4426:	bf00      	nop
    4428:	00004581 	.word	0x00004581
    442c:	000043f5 	.word	0x000043f5
    4430:	00004591 	.word	0x00004591

00004434 <clock_init>:
// clock clock who's there ///////////////////

#undef JAKES_CLOCK
#ifndef JAKES_CLOCK
void clock_init(void){ // Jake Read
    NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(0);
    4434:	4b35      	ldr	r3, [pc, #212]	; (450c <clock_init+0xd8>)
    4436:	881a      	ldrh	r2, [r3, #0]
    4438:	b292      	uxth	r2, r2
    443a:	801a      	strh	r2, [r3, #0]
    GCLK->CTRLA.bit.SWRST = 1;
    443c:	4b34      	ldr	r3, [pc, #208]	; (4510 <clock_init+0xdc>)
    443e:	781a      	ldrb	r2, [r3, #0]
    4440:	f042 0201 	orr.w	r2, r2, #1
    4444:	701a      	strb	r2, [r3, #0]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_SWRST);
    4446:	685a      	ldr	r2, [r3, #4]
    4448:	07d2      	lsls	r2, r2, #31
    444a:	d4fc      	bmi.n	4446 <clock_init+0x12>
    GCLK->GENCTRL[3].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    444c:	4a30      	ldr	r2, [pc, #192]	; (4510 <clock_init+0xdc>)
    444e:	f44f 7182 	mov.w	r1, #260	; 0x104
    4452:	62d1      	str	r1, [r2, #44]	; 0x2c
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL3);
    4454:	685a      	ldr	r2, [r3, #4]
    4456:	0690      	lsls	r0, r2, #26
    4458:	d4fc      	bmi.n	4454 <clock_init+0x20>
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    445a:	4b2d      	ldr	r3, [pc, #180]	; (4510 <clock_init+0xdc>)
    445c:	f44f 7282 	mov.w	r2, #260	; 0x104
    4460:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    4462:	4b2b      	ldr	r3, [pc, #172]	; (4510 <clock_init+0xdc>)
    4464:	685b      	ldr	r3, [r3, #4]
    4466:	f013 0204 	ands.w	r2, r3, #4
    446a:	d1fa      	bne.n	4462 <clock_init+0x2e>

    OSCCTRL->DFLLCTRLA.reg = 0;
    446c:	4b29      	ldr	r3, [pc, #164]	; (4514 <clock_init+0xe0>)
    446e:	771a      	strb	r2, [r3, #28]
    OSCCTRL->DFLLMUL.reg = OSCCTRL_DFLLMUL_CSTEP(0x1) | OSCCTRL_DFLLMUL_FSTEP(0x1) | OSCCTRL_DFLLMUL_MUL(0);
    4470:	4a29      	ldr	r2, [pc, #164]	; (4518 <clock_init+0xe4>)
    4472:	629a      	str	r2, [r3, #40]	; 0x28
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLMUL);
    4474:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    4478:	f002 0210 	and.w	r2, r2, #16
    447c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    4480:	2a00      	cmp	r2, #0
    4482:	d1f7      	bne.n	4474 <clock_init+0x40>
    OSCCTRL->DFLLCTRLB.reg = 0;
    4484:	4b23      	ldr	r3, [pc, #140]	; (4514 <clock_init+0xe0>)
    4486:	f883 1020 	strb.w	r1, [r3, #32]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLCTRLB);
    448a:	4b22      	ldr	r3, [pc, #136]	; (4514 <clock_init+0xe0>)
    448c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    4490:	0751      	lsls	r1, r2, #29
    4492:	d4fa      	bmi.n	448a <clock_init+0x56>
    OSCCTRL->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ENABLE;
    4494:	7f1a      	ldrb	r2, [r3, #28]
    4496:	f042 0202 	orr.w	r2, r2, #2
    449a:	771a      	strb	r2, [r3, #28]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE);
    449c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    44a0:	0792      	lsls	r2, r2, #30
    44a2:	d4fb      	bmi.n	449c <clock_init+0x68>
    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
    44a4:	4b1b      	ldr	r3, [pc, #108]	; (4514 <clock_init+0xe0>)
    44a6:	2298      	movs	r2, #152	; 0x98
    44a8:	f883 2020 	strb.w	r2, [r3, #32]
    while(!OSCCTRL->STATUS.bit.DFLLRDY);
    44ac:	4b19      	ldr	r3, [pc, #100]	; (4514 <clock_init+0xe0>)
    44ae:	691b      	ldr	r3, [r3, #16]
    44b0:	05d8      	lsls	r0, r3, #23
    44b2:	d5fb      	bpl.n	44ac <clock_init+0x78>

    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DFLL_Val) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(24u);
    44b4:	4b16      	ldr	r3, [pc, #88]	; (4510 <clock_init+0xdc>)
    44b6:	4a19      	ldr	r2, [pc, #100]	; (451c <clock_init+0xe8>)
    44b8:	635a      	str	r2, [r3, #52]	; 0x34
    while(GCLK->SYNCBUSY.bit.GENCTRL5);
    44ba:	685a      	ldr	r2, [r3, #4]
    44bc:	0611      	lsls	r1, r2, #24
    44be:	d4fc      	bmi.n	44ba <clock_init+0x86>

    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_FDPLL0].reg = (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(GCLK_PCHCTRL_GEN_GCLK5_Val);
    44c0:	4b13      	ldr	r3, [pc, #76]	; (4510 <clock_init+0xdc>)
    44c2:	2245      	movs	r2, #69	; 0x45
    44c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0x00) | OSCCTRL_DPLLRATIO_LDR(59);
    44c8:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    44cc:	223b      	movs	r2, #59	; 0x3b
    44ce:	635a      	str	r2, [r3, #52]	; 0x34
    44d0:	4619      	mov	r1, r3
    while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.DPLLRATIO);
    44d2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    44d4:	4b0f      	ldr	r3, [pc, #60]	; (4514 <clock_init+0xe0>)
    44d6:	0752      	lsls	r2, r2, #29
    44d8:	d4fb      	bmi.n	44d2 <clock_init+0x9e>
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK | OSCCTRL_DPLLCTRLB_LBYPASS;
    44da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    44de:	639a      	str	r2, [r3, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    44e0:	2202      	movs	r2, #2
    44e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    while(OSCCTRL->Dpll[0].DPLLSTATUS.bit.CLKRDY == 0 || OSCCTRL->Dpll[0].DPLLSTATUS.bit.LOCK == 0);
    44e6:	4b0b      	ldr	r3, [pc, #44]	; (4514 <clock_init+0xe0>)
    44e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    44ea:	0790      	lsls	r0, r2, #30
    44ec:	d5fb      	bpl.n	44e6 <clock_init+0xb2>
    44ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44f0:	07d9      	lsls	r1, r3, #31
    44f2:	d5f8      	bpl.n	44e6 <clock_init+0xb2>

    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL0) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
    44f4:	4b06      	ldr	r3, [pc, #24]	; (4510 <clock_init+0xdc>)
    44f6:	f240 3207 	movw	r2, #775	; 0x307
    44fa:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    44fc:	685a      	ldr	r2, [r3, #4]
    44fe:	0752      	lsls	r2, r2, #29
    4500:	d4fc      	bmi.n	44fc <clock_init+0xc8>

    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <clock_init+0xec>)
    4504:	2201      	movs	r2, #1
    4506:	715a      	strb	r2, [r3, #5]
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	41004000 	.word	0x41004000
    4510:	40001c00 	.word	0x40001c00
    4514:	40001000 	.word	0x40001000
    4518:	04010000 	.word	0x04010000
    451c:	00180106 	.word	0x00180106
    4520:	40000800 	.word	0x40000800

00004524 <nmain>:
}
#endif // #ifdef JAKES_CLOCK

void nmain(void) {
    4524:	b508      	push	{r3, lr}
}

void raise_LED_pins(void) { // multiple target boards
    // raise_D13(); raise_D12();
    // raise_D13_metro();   // Metro M4 Express
    raise_D13_feather(); // Feather M4 Express
    4526:	4b03      	ldr	r3, [pc, #12]	; (4534 <nmain+0x10>)
    4528:	4798      	blx	r3

void nmain(void) {
        raise_LED_pins(); // raise_D13(); raise_D12();
        // activity_LED_demo();
	while (1) {
            flicker_LED();
    452a:	4b03      	ldr	r3, [pc, #12]	; (4538 <nmain+0x14>)
    452c:	4798      	blx	r3
            short_timer();
    452e:	4b03      	ldr	r3, [pc, #12]	; (453c <nmain+0x18>)
    4530:	4798      	blx	r3
    4532:	e7fa      	b.n	452a <nmain+0x6>
    4534:	00004581 	.word	0x00004581
    4538:	00004415 	.word	0x00004415
    453c:	000043f5 	.word	0x000043f5

00004540 <main>:
	}
}

int main(void) {
    4540:	b508      	push	{r3, lr}
    SystemInit();
    4542:	4b04      	ldr	r3, [pc, #16]	; (4554 <main+0x14>)
    4544:	4798      	blx	r3

// new uncommented ###bookmark two lines
    clock_init();
    4546:	4b04      	ldr	r3, [pc, #16]	; (4558 <main+0x18>)
    4548:	4798      	blx	r3
    // SysTick_Config(4000000);
// end new

    init_act_LED();
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <main+0x1c>)
    454c:	4798      	blx	r3
    nmain();
    454e:	4b04      	ldr	r3, [pc, #16]	; (4560 <main+0x20>)
    4550:	4798      	blx	r3
    4552:	bf00      	nop
    4554:	00004311 	.word	0x00004311
    4558:	00004435 	.word	0x00004435
    455c:	00004565 	.word	0x00004565
    4560:	00004525 	.word	0x00004525

00004564 <init_act_LED>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4564:	4b04      	ldr	r3, [pc, #16]	; (4578 <init_act_LED+0x14>)
    4566:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    456a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    456c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4570:	629a      	str	r2, [r3, #40]	; 0x28
    4572:	4a02      	ldr	r2, [pc, #8]	; (457c <init_act_LED+0x18>)
    4574:	629a      	str	r2, [r3, #40]	; 0x28
    4576:	4770      	bx	lr
    4578:	41008000 	.word	0x41008000
    457c:	c0000080 	.word	0xc0000080

00004580 <raise_D13_feather>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4580:	4b02      	ldr	r3, [pc, #8]	; (458c <raise_D13_feather+0xc>)
    4582:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4586:	619a      	str	r2, [r3, #24]
    4588:	4770      	bx	lr
    458a:	bf00      	nop
    458c:	41008000 	.word	0x41008000

00004590 <lower_D13_feather>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4590:	4b02      	ldr	r3, [pc, #8]	; (459c <lower_D13_feather+0xc>)
    4592:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4596:	615a      	str	r2, [r3, #20]
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	41008000 	.word	0x41008000

000045a0 <__libc_init_array>:
    45a0:	b570      	push	{r4, r5, r6, lr}
    45a2:	4b0e      	ldr	r3, [pc, #56]	; (45dc <__libc_init_array+0x3c>)
    45a4:	4d0e      	ldr	r5, [pc, #56]	; (45e0 <__libc_init_array+0x40>)
    45a6:	1aed      	subs	r5, r5, r3
    45a8:	10ad      	asrs	r5, r5, #2
    45aa:	2400      	movs	r4, #0
    45ac:	461e      	mov	r6, r3
    45ae:	42ac      	cmp	r4, r5
    45b0:	d004      	beq.n	45bc <__libc_init_array+0x1c>
    45b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    45b6:	4790      	blx	r2
    45b8:	3401      	adds	r4, #1
    45ba:	e7f8      	b.n	45ae <__libc_init_array+0xe>
    45bc:	f000 f816 	bl	45ec <_init>
    45c0:	4d08      	ldr	r5, [pc, #32]	; (45e4 <__libc_init_array+0x44>)
    45c2:	4b09      	ldr	r3, [pc, #36]	; (45e8 <__libc_init_array+0x48>)
    45c4:	1aed      	subs	r5, r5, r3
    45c6:	10ad      	asrs	r5, r5, #2
    45c8:	2400      	movs	r4, #0
    45ca:	461e      	mov	r6, r3
    45cc:	42ac      	cmp	r4, r5
    45ce:	d004      	beq.n	45da <__libc_init_array+0x3a>
    45d0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    45d4:	4790      	blx	r2
    45d6:	3401      	adds	r4, #1
    45d8:	e7f8      	b.n	45cc <__libc_init_array+0x2c>
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	000045f8 	.word	0x000045f8
    45e0:	000045f8 	.word	0x000045f8
    45e4:	000045fc 	.word	0x000045fc
    45e8:	000045f8 	.word	0x000045f8

000045ec <_init>:
    45ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ee:	bf00      	nop
    45f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45f2:	bc08      	pop	{r3}
    45f4:	469e      	mov	lr, r3
    45f6:	4770      	bx	lr

000045f8 <__init_array_start>:
    45f8:	000042dd 	.word	0x000042dd

000045fc <_fini>:
    45fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45fe:	bf00      	nop
    4600:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4602:	bc08      	pop	{r3}
    4604:	469e      	mov	lr, r3
    4606:	4770      	bx	lr

00004608 <__do_global_dtors_aux_fini_array_entry>:
    4608:	42b5 0000                                   .B..
