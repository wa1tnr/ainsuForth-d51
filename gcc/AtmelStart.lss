
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078c  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  0000478c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00010004  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010004  2**0
                  CONTENTS
  4 .bss          00000030  20000004  00004790  00010004  2**2
                  ALLOC
  5 .stack        0000c004  20000034  000047c0  00010004  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  7 .comment      0000007f  00000000  00000000  00010032  2**0
                  CONTENTS, READONLY
  8 .debug_info   00006451  00000000  00000000  000100b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000e1d  00000000  00000000  00016502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b0  00000000  00000000  0001731f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  000174cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002d3b  00000000  00000000  0001777f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004118  00000000  00000000  0001a4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000df132  00000000  00000000  0001e5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000394  00000000  00000000  000fd704  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000007fb  00000000  00000000  000fda98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	38 c0 00 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     8.. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40bc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40cc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ec:	ed 42 00 00 00 00 00 00 b5 42 00 00 ed 42 00 00     .B.......B...B..
    40fc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    410c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    411c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    412c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    413c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    414c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    4180:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4190:	00 00 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    41a0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41f0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4200:	ed 42 00 00 00 00 00 00 00 00 00 00 ed 42 00 00     .B...........B..
    4210:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4220:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4230:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4240:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4250:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4260:	00 00 00 00                                         ....

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000004 	.word	0x20000004
    4280:	00000000 	.word	0x00000000
    4284:	0000478c 	.word	0x0000478c

00004288 <frame_dummy>:
    4288:	b508      	push	{r3, lr}
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <frame_dummy+0x10>)
    428c:	b11b      	cbz	r3, 4296 <frame_dummy+0xe>
    428e:	4903      	ldr	r1, [pc, #12]	; (429c <frame_dummy+0x14>)
    4290:	4803      	ldr	r0, [pc, #12]	; (42a0 <frame_dummy+0x18>)
    4292:	f3af 8000 	nop.w
    4296:	bd08      	pop	{r3, pc}
    4298:	00000000 	.word	0x00000000
    429c:	20000008 	.word	0x20000008
    42a0:	0000478c 	.word	0x0000478c

000042a4 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    42a4:	4b01      	ldr	r3, [pc, #4]	; (42ac <SystemInit+0x8>)
    42a6:	4a02      	ldr	r2, [pc, #8]	; (42b0 <SystemInit+0xc>)
    42a8:	601a      	str	r2, [r3, #0]
	return;
}
    42aa:	4770      	bx	lr
    42ac:	20000000 	.word	0x20000000
    42b0:	02dc6c00 	.word	0x02dc6c00

000042b4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    42b4:	4a0b      	ldr	r2, [pc, #44]	; (42e4 <RAMECC_Handler+0x30>)
    42b6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    42b8:	b082      	sub	sp, #8
    42ba:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    42bc:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    42be:	9b01      	ldr	r3, [sp, #4]
    42c0:	0799      	lsls	r1, r3, #30
    42c2:	d505      	bpl.n	42d0 <RAMECC_Handler+0x1c>
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <RAMECC_Handler+0x34>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	b113      	cbz	r3, 42d0 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    42ca:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    42cc:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    42ce:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	07db      	lsls	r3, r3, #31
    42d4:	d504      	bpl.n	42e0 <RAMECC_Handler+0x2c>
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <RAMECC_Handler+0x34>)
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	b10b      	cbz	r3, 42e0 <RAMECC_Handler+0x2c>
    42dc:	4a01      	ldr	r2, [pc, #4]	; (42e4 <RAMECC_Handler+0x30>)
    42de:	e7f4      	b.n	42ca <RAMECC_Handler+0x16>
}
    42e0:	b002      	add	sp, #8
    42e2:	4770      	bx	lr
    42e4:	41020000 	.word	0x41020000
    42e8:	20000024 	.word	0x20000024

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
    42f2:	4a14      	ldr	r2, [pc, #80]	; (4344 <Reset_Handler+0x54>)
    42f4:	4b14      	ldr	r3, [pc, #80]	; (4348 <Reset_Handler+0x58>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d003      	beq.n	4302 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    42fa:	4914      	ldr	r1, [pc, #80]	; (434c <Reset_Handler+0x5c>)
    42fc:	3a04      	subs	r2, #4
    42fe:	428b      	cmp	r3, r1
    4300:	d318      	bcc.n	4334 <Reset_Handler+0x44>
{
    4302:	4b13      	ldr	r3, [pc, #76]	; (4350 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
    4304:	4a13      	ldr	r2, [pc, #76]	; (4354 <Reset_Handler+0x64>)
		*pDest++ = 0;
    4306:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
    4308:	4293      	cmp	r3, r2
    430a:	d318      	bcc.n	433e <Reset_Handler+0x4e>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    430c:	4a12      	ldr	r2, [pc, #72]	; (4358 <Reset_Handler+0x68>)
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <Reset_Handler+0x6c>)
    4310:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4314:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
    4316:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    431a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    431e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4326:	f3bf 8f6f 	isb	sy
	__libc_init_array();
    432a:	4b0d      	ldr	r3, [pc, #52]	; (4360 <Reset_Handler+0x70>)
    432c:	4798      	blx	r3
	main();
    432e:	4b0d      	ldr	r3, [pc, #52]	; (4364 <Reset_Handler+0x74>)
    4330:	4798      	blx	r3
    4332:	e7fe      	b.n	4332 <Reset_Handler+0x42>
			*pDest++ = *pSrc++;
    4334:	f852 0f04 	ldr.w	r0, [r2, #4]!
    4338:	f843 0b04 	str.w	r0, [r3], #4
    433c:	e7df      	b.n	42fe <Reset_Handler+0xe>
		*pDest++ = 0;
    433e:	f843 1b04 	str.w	r1, [r3], #4
    4342:	e7e1      	b.n	4308 <Reset_Handler+0x18>
    4344:	0000478c 	.word	0x0000478c
    4348:	20000000 	.word	0x20000000
    434c:	20000004 	.word	0x20000004
    4350:	20000004 	.word	0x20000004
    4354:	20000034 	.word	0x20000034
    4358:	00004000 	.word	0x00004000
    435c:	e000ed00 	.word	0xe000ed00
    4360:	00004725 	.word	0x00004725
    4364:	00004369 	.word	0x00004369

00004368 <main>:
#include "atmel_start.h"
#include "src/vocab.h"
#include "src/blink_lab.h"

int main(void) {
    4368:	b508      	push	{r3, lr}
    // int icount = 5;
    SystemInit();
    436a:	4b03      	ldr	r3, [pc, #12]	; (4378 <main+0x10>)
    436c:	4798      	blx	r3
    LED_output();
    436e:	4b03      	ldr	r3, [pc, #12]	; (437c <main+0x14>)
    4370:	4798      	blx	r3
    blink_lab();
    4372:	4b03      	ldr	r3, [pc, #12]	; (4380 <main+0x18>)
    4374:	4798      	blx	r3
    4376:	e7fe      	b.n	4376 <main+0xe>
    4378:	000042a5 	.word	0x000042a5
    437c:	00004545 	.word	0x00004545
    4380:	00004655 	.word	0x00004655

00004384 <init_act_LED>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4384:	4b04      	ldr	r3, [pc, #16]	; (4398 <init_act_LED+0x14>)
    4386:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    438a:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    438c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4390:	629a      	str	r2, [r3, #40]	; 0x28
    4392:	4a02      	ldr	r2, [pc, #8]	; (439c <init_act_LED+0x18>)
    4394:	629a      	str	r2, [r3, #40]	; 0x28
    gpio_set_pin_direction(PA23, GPIO_DIRECTION_OUT);

    // No longer supporting Metro M4 Express directly.

    // gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
}
    4396:	4770      	bx	lr
    4398:	41008000 	.word	0x41008000
    439c:	c0000080 	.word	0xc0000080

000043a0 <raise_D13_feather>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    43a0:	4b02      	ldr	r3, [pc, #8]	; (43ac <raise_D13_feather+0xc>)
    43a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    43a6:	619a      	str	r2, [r3, #24]
}
*/

void raise_D13_feather(void) { // Feather M4 Express
    gpio_set_pin_level(PA23, true);
}
    43a8:	4770      	bx	lr
    43aa:	bf00      	nop
    43ac:	41008000 	.word	0x41008000

000043b0 <lower_D13_feather>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    43b0:	4b02      	ldr	r3, [pc, #8]	; (43bc <lower_D13_feather+0xc>)
    43b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    43b6:	615a      	str	r2, [r3, #20]
}
*/

void lower_D13_feather(void) {
    gpio_set_pin_level(PA23, false);
}
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	41008000 	.word	0x41008000

000043c0 <uSec>:
// zero is false.  -1 is true.  1 is also true.
// any non-zero value is true (partially verified)

/* Many changes: by wa1tnr, July 2018 */

void uSec(void) {
    43c0:	b082      	sub	sp, #8
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    43c2:	2301      	movs	r3, #1
    43c4:	9301      	str	r3, [sp, #4]
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	2b01      	cmp	r3, #1
    43ca:	dd01      	ble.n	43d0 <uSec+0x10>
        // nothing
    }
}
    43cc:	b002      	add	sp, #8
    43ce:	4770      	bx	lr
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	3301      	adds	r3, #1
    43d4:	e7f6      	b.n	43c4 <uSec+0x4>
	...

000043d8 <short_timer>:
void short_timer(void) { // human blinkie timescale
    uint32_t on_time  = 2140111222; // it's 2147 something ;)

    int rclock = 21401122; // 21.4 million

    if (jclock)  rclock = (rclock / 400); // high end of rapid but pleasant
    43d8:	4b09      	ldr	r3, [pc, #36]	; (4400 <short_timer+0x28>)

    if (!jclock) rclock = (rclock /  45); // 25 a bit too sluggish to toggle states

    for(int j = 2; j>0; j--) {
        for(on_time =   rclock; on_time > 0; on_time--) {
            uSec();
    43da:	480a      	ldr	r0, [pc, #40]	; (4404 <short_timer+0x2c>)
    if (jclock)  rclock = (rclock / 400); // high end of rapid but pleasant
    43dc:	6819      	ldr	r1, [r3, #0]
    if (!jclock) rclock = (rclock /  45); // 25 a bit too sluggish to toggle states
    43de:	4b0a      	ldr	r3, [pc, #40]	; (4408 <short_timer+0x30>)
    43e0:	f24d 02fe 	movw	r2, #53502	; 0xd0fe
    43e4:	2900      	cmp	r1, #0
    43e6:	bf08      	it	eq
    43e8:	461a      	moveq	r2, r3
void short_timer(void) { // human blinkie timescale
    43ea:	b510      	push	{r4, lr}
        for(on_time =   rclock; on_time > 0; on_time--) {
    43ec:	4611      	mov	r1, r2
    43ee:	4604      	mov	r4, r0
            uSec();
    43f0:	4780      	blx	r0
        for(on_time =   rclock; on_time > 0; on_time--) {
    43f2:	3901      	subs	r1, #1
    43f4:	d1fc      	bne.n	43f0 <short_timer+0x18>
            uSec();
    43f6:	47a0      	blx	r4
        for(on_time =   rclock; on_time > 0; on_time--) {
    43f8:	3a01      	subs	r2, #1
    43fa:	d1fc      	bne.n	43f6 <short_timer+0x1e>
        }
    }
}
    43fc:	bd10      	pop	{r4, pc}
    43fe:	bf00      	nop
    4400:	20000020 	.word	0x20000020
    4404:	000043c1 	.word	0x000043c1
    4408:	000741bc 	.word	0x000741bc

0000440c <blink_LED>:

void lower_LED_pins(void) {
    lower_D13_feather();
}

void blink_LED(void) {
    440c:	b510      	push	{r4, lr}
    raise_D13_feather(); // Feather M4 Express
    440e:	4b05      	ldr	r3, [pc, #20]	; (4424 <blink_LED+0x18>)
    raise_LED_pins(); // Feather M4 or Metro M4
    short_timer();
    4410:	4c05      	ldr	r4, [pc, #20]	; (4428 <blink_LED+0x1c>)
    raise_D13_feather(); // Feather M4 Express
    4412:	4798      	blx	r3
    short_timer();
    4414:	47a0      	blx	r4
    lower_D13_feather();
    4416:	4b05      	ldr	r3, [pc, #20]	; (442c <blink_LED+0x20>)
    4418:	4798      	blx	r3
    lower_LED_pins();
    short_timer();
    441a:	4623      	mov	r3, r4
}
    441c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    short_timer();
    4420:	4718      	bx	r3
    4422:	bf00      	nop
    4424:	000043a1 	.word	0x000043a1
    4428:	000043d9 	.word	0x000043d9
    442c:	000043b1 	.word	0x000043b1

00004430 <clock_init>:
// clock clock who's there ///////////////////

#undef JAKES_CLOCK
#ifndef JAKES_CLOCK
void clock_init(void){ // Jake Read
    NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(0);
    4430:	4a30      	ldr	r2, [pc, #192]	; (44f4 <clock_init+0xc4>)
    4432:	8813      	ldrh	r3, [r2, #0]
    4434:	b29b      	uxth	r3, r3
    4436:	8013      	strh	r3, [r2, #0]
    GCLK->CTRLA.bit.SWRST = 1;
    4438:	4b2f      	ldr	r3, [pc, #188]	; (44f8 <clock_init+0xc8>)
    443a:	781a      	ldrb	r2, [r3, #0]
    443c:	f042 0201 	orr.w	r2, r2, #1
    4440:	701a      	strb	r2, [r3, #0]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_SWRST);
    4442:	685a      	ldr	r2, [r3, #4]
    4444:	07d0      	lsls	r0, r2, #31
    4446:	d4fc      	bmi.n	4442 <clock_init+0x12>
    GCLK->GENCTRL[3].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    4448:	f44f 7282 	mov.w	r2, #260	; 0x104
    444c:	62da      	str	r2, [r3, #44]	; 0x2c
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL3);
    444e:	685a      	ldr	r2, [r3, #4]
    4450:	0691      	lsls	r1, r2, #26
    4452:	d4fc      	bmi.n	444e <clock_init+0x1e>
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    4454:	f44f 7282 	mov.w	r2, #260	; 0x104
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    4458:	4927      	ldr	r1, [pc, #156]	; (44f8 <clock_init+0xc8>)
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    445a:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    445c:	684a      	ldr	r2, [r1, #4]
    445e:	f012 0204 	ands.w	r2, r2, #4
    4462:	d1fb      	bne.n	445c <clock_init+0x2c>

    OSCCTRL->DFLLCTRLA.reg = 0;
    4464:	4b25      	ldr	r3, [pc, #148]	; (44fc <clock_init+0xcc>)
    4466:	771a      	strb	r2, [r3, #28]
    OSCCTRL->DFLLMUL.reg = OSCCTRL_DFLLMUL_CSTEP(0x1) | OSCCTRL_DFLLMUL_FSTEP(0x1) | OSCCTRL_DFLLMUL_MUL(0);
    4468:	4a25      	ldr	r2, [pc, #148]	; (4500 <clock_init+0xd0>)
    446a:	629a      	str	r2, [r3, #40]	; 0x28
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLMUL);
    446c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    4470:	f012 0210 	ands.w	r2, r2, #16
    4474:	d1fa      	bne.n	446c <clock_init+0x3c>
    OSCCTRL->DFLLCTRLB.reg = 0;
    4476:	f883 2020 	strb.w	r2, [r3, #32]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLCTRLB);
    447a:	4b20      	ldr	r3, [pc, #128]	; (44fc <clock_init+0xcc>)
    447c:	4619      	mov	r1, r3
    447e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    4482:	0752      	lsls	r2, r2, #29
    4484:	d4fb      	bmi.n	447e <clock_init+0x4e>
    OSCCTRL->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ENABLE;
    4486:	7f1a      	ldrb	r2, [r3, #28]
    4488:	f042 0202 	orr.w	r2, r2, #2
    448c:	771a      	strb	r2, [r3, #28]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE);
    448e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    4492:	079b      	lsls	r3, r3, #30
    4494:	d4fb      	bmi.n	448e <clock_init+0x5e>
    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
    4496:	2398      	movs	r3, #152	; 0x98
    while(!OSCCTRL->STATUS.bit.DFLLRDY);
    4498:	4a18      	ldr	r2, [pc, #96]	; (44fc <clock_init+0xcc>)
    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
    449a:	f881 3020 	strb.w	r3, [r1, #32]
    while(!OSCCTRL->STATUS.bit.DFLLRDY);
    449e:	6913      	ldr	r3, [r2, #16]
    44a0:	05d8      	lsls	r0, r3, #23
    44a2:	d5fc      	bpl.n	449e <clock_init+0x6e>

    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DFLL_Val) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(24u);
    44a4:	4b14      	ldr	r3, [pc, #80]	; (44f8 <clock_init+0xc8>)
    44a6:	4a17      	ldr	r2, [pc, #92]	; (4504 <clock_init+0xd4>)
    44a8:	635a      	str	r2, [r3, #52]	; 0x34
    while(GCLK->SYNCBUSY.bit.GENCTRL5);
    44aa:	685a      	ldr	r2, [r3, #4]
    44ac:	0611      	lsls	r1, r2, #24
    44ae:	d4fc      	bmi.n	44aa <clock_init+0x7a>

    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_FDPLL0].reg = (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(GCLK_PCHCTRL_GEN_GCLK5_Val);
    44b0:	2245      	movs	r2, #69	; 0x45
    44b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0x00) | OSCCTRL_DPLLRATIO_LDR(59);
    44b6:	4b11      	ldr	r3, [pc, #68]	; (44fc <clock_init+0xcc>)
    44b8:	223b      	movs	r2, #59	; 0x3b
    44ba:	635a      	str	r2, [r3, #52]	; 0x34
    while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.DPLLRATIO);
    44bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    44be:	0752      	lsls	r2, r2, #29
    44c0:	d4fc      	bmi.n	44bc <clock_init+0x8c>
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK | OSCCTRL_DPLLCTRLB_LBYPASS;
    44c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    44c6:	639a      	str	r2, [r3, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    44c8:	2202      	movs	r2, #2
    44ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    while(OSCCTRL->Dpll[0].DPLLSTATUS.bit.CLKRDY == 0 || OSCCTRL->Dpll[0].DPLLSTATUS.bit.LOCK == 0);
    44ce:	4b0b      	ldr	r3, [pc, #44]	; (44fc <clock_init+0xcc>)
    44d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    44d2:	0790      	lsls	r0, r2, #30
    44d4:	d5fc      	bpl.n	44d0 <clock_init+0xa0>
    44d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    44d8:	07d1      	lsls	r1, r2, #31
    44da:	d5f9      	bpl.n	44d0 <clock_init+0xa0>

    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL0) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
    44dc:	4b06      	ldr	r3, [pc, #24]	; (44f8 <clock_init+0xc8>)
    44de:	f240 3207 	movw	r2, #775	; 0x307
    44e2:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    44e4:	685a      	ldr	r2, [r3, #4]
    44e6:	0752      	lsls	r2, r2, #29
    44e8:	d4fc      	bmi.n	44e4 <clock_init+0xb4>

    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    44ea:	4b07      	ldr	r3, [pc, #28]	; (4508 <clock_init+0xd8>)
    44ec:	2201      	movs	r2, #1
    44ee:	715a      	strb	r2, [r3, #5]
}
    44f0:	4770      	bx	lr
    44f2:	bf00      	nop
    44f4:	41004000 	.word	0x41004000
    44f8:	40001c00 	.word	0x40001c00
    44fc:	40001000 	.word	0x40001000
    4500:	04010000 	.word	0x04010000
    4504:	00180106 	.word	0x00180106
    4508:	40000800 	.word	0x40000800

0000450c <nmain>:
#endif // #ifdef JAKES_CLOCK

void nmain(void) {
    450c:	b508      	push	{r3, lr}
	while (1) {
            flicker_LED();
    450e:	4d02      	ldr	r5, [pc, #8]	; (4518 <nmain+0xc>)
            short_timer();
    4510:	4c02      	ldr	r4, [pc, #8]	; (451c <nmain+0x10>)
            flicker_LED();
    4512:	47a8      	blx	r5
            short_timer();
    4514:	47a0      	blx	r4
    4516:	e7fc      	b.n	4512 <nmain+0x6>
    4518:	0000440d 	.word	0x0000440d
    451c:	000043d9 	.word	0x000043d9

00004520 <caution_lamp>:
	}
}

void caution_lamp(void) {
    4520:	b508      	push	{r3, lr}
    // SystemInit();
    if (jclock) {
    4522:	4b04      	ldr	r3, [pc, #16]	; (4534 <caution_lamp+0x14>)
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	b10b      	cbz	r3, 452c <caution_lamp+0xc>
        clock_init();
    4528:	4b03      	ldr	r3, [pc, #12]	; (4538 <caution_lamp+0x18>)
    452a:	4798      	blx	r3
    }
    init_act_LED();
    452c:	4b03      	ldr	r3, [pc, #12]	; (453c <caution_lamp+0x1c>)
    452e:	4798      	blx	r3
    nmain();
    4530:	4b03      	ldr	r3, [pc, #12]	; (4540 <caution_lamp+0x20>)
    4532:	4798      	blx	r3
    4534:	20000020 	.word	0x20000020
    4538:	00004431 	.word	0x00004431
    453c:	00004385 	.word	0x00004385
    4540:	0000450d 	.word	0x0000450d

00004544 <LED_output>:
#include "atmel_start.h"
#include "src/vocab.h"

void LED_output(void) {
    PORT->Group[0].DIRSET.reg |= (uint32_t)(1 << 23); // PA23 OUTPUT
    4544:	4a02      	ldr	r2, [pc, #8]	; (4550 <LED_output+0xc>)
    4546:	6893      	ldr	r3, [r2, #8]
    4548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    454c:	6093      	str	r3, [r2, #8]
}
    454e:	4770      	bx	lr
    4550:	41008000 	.word	0x41008000

00004554 <LED_on>:

void LED_on(void) {
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 23); // PA23 SET
    4554:	4a02      	ldr	r2, [pc, #8]	; (4560 <LED_on+0xc>)
    4556:	6993      	ldr	r3, [r2, #24]
    4558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    455c:	6193      	str	r3, [r2, #24]
}
    455e:	4770      	bx	lr
    4560:	41008000 	.word	0x41008000

00004564 <LED_off>:

void LED_off(void) {
    PORT->Group[0].OUTCLR.reg |= (uint32_t)(1 << 23); // PA23 CLR
    4564:	4a02      	ldr	r2, [pc, #8]	; (4570 <LED_off+0xc>)
    4566:	6953      	ldr	r3, [r2, #20]
    4568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    456c:	6153      	str	r3, [r2, #20]
}
    456e:	4770      	bx	lr
    4570:	41008000 	.word	0x41008000

00004574 <ldelay>:

void LED_toggle(void) { // hasn't worked yet iirc
    PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 23); // PA23 TOGGLE ON/OFF
}

void ldelay(void) { // homebrew
    4574:	b082      	sub	sp, #8
    for (volatile int i = 2100; i>0; i--) {
    4576:	f640 0334 	movw	r3, #2100	; 0x834
    457a:	9300      	str	r3, [sp, #0]
        for (volatile int j = 420; j>0; j--) {
    457c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    for (volatile int i = 2100; i>0; i--) {
    4580:	9b00      	ldr	r3, [sp, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	dc01      	bgt.n	458a <ldelay+0x16>
        }
    }
}
    4586:	b002      	add	sp, #8
    4588:	4770      	bx	lr
        for (volatile int j = 420; j>0; j--) {
    458a:	9201      	str	r2, [sp, #4]
    458c:	9b01      	ldr	r3, [sp, #4]
    458e:	2b00      	cmp	r3, #0
    4590:	dc03      	bgt.n	459a <ldelay+0x26>
    for (volatile int i = 2100; i>0; i--) {
    4592:	9b00      	ldr	r3, [sp, #0]
    4594:	3b01      	subs	r3, #1
    4596:	9300      	str	r3, [sp, #0]
    4598:	e7f2      	b.n	4580 <ldelay+0xc>
        for (volatile int j = 420; j>0; j--) {
    459a:	9b01      	ldr	r3, [sp, #4]
    459c:	3b01      	subs	r3, #1
    459e:	9301      	str	r3, [sp, #4]
    45a0:	e7f4      	b.n	458c <ldelay+0x18>
	...

000045a4 <blink_toggled>:
    PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 23); // PA23 TOGGLE ON/OFF
    45a4:	4805      	ldr	r0, [pc, #20]	; (45bc <blink_toggled+0x18>)

#define RESET_COUNT 5

void blink_toggled(void) {
    LED_toggle();
    ldelay();
    45a6:	4906      	ldr	r1, [pc, #24]	; (45c0 <blink_toggled+0x1c>)
void blink_toggled(void) {
    45a8:	b510      	push	{r4, lr}
    PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 23); // PA23 TOGGLE ON/OFF
    45aa:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
    45ae:	61c4      	str	r4, [r0, #28]
    ldelay();
    45b0:	4788      	blx	r1
    PORT->Group[0].OUTTGL.reg = (uint32_t)(1 << 23); // PA23 TOGGLE ON/OFF
    45b2:	61c4      	str	r4, [r0, #28]
    LED_toggle();
    ldelay();
}
    45b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ldelay();
    45b8:	4708      	bx	r1
    45ba:	bf00      	nop
    45bc:	41008000 	.word	0x41008000
    45c0:	00004575 	.word	0x00004575

000045c4 <blink>:

void blink(void) {
    45c4:	b510      	push	{r4, lr}
    LED_on();
    45c6:	4b04      	ldr	r3, [pc, #16]	; (45d8 <blink+0x14>)
    45c8:	4798      	blx	r3
    ldelay();
    45ca:	4904      	ldr	r1, [pc, #16]	; (45dc <blink+0x18>)
    45cc:	4788      	blx	r1
    LED_off();
    45ce:	4b04      	ldr	r3, [pc, #16]	; (45e0 <blink+0x1c>)
    45d0:	4798      	blx	r3
    ldelay();
}
    45d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ldelay();
    45d6:	4708      	bx	r1
    45d8:	00004555 	.word	0x00004555
    45dc:	00004575 	.word	0x00004575
    45e0:	00004565 	.word	0x00004565

000045e4 <bl_togl_Del>:
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 23); // PA23 ON
    PORT->Group[0].OUTSET.reg |= (uint32_t)(0 << 23); // PA23 OFF
    PORT->Group[0].OUTSET.reg |= (uint32_t)(1 << 23); // PA23 ON
*/

void bl_togl_Del(void) {
    45e4:	b510      	push	{r4, lr}
    blink_toggled();
    45e6:	4b04      	ldr	r3, [pc, #16]	; (45f8 <bl_togl_Del+0x14>)
    45e8:	4798      	blx	r3
    for (int i = 3; i > 0; i--) {
        ldelay();
    45ea:	4904      	ldr	r1, [pc, #16]	; (45fc <bl_togl_Del+0x18>)
    45ec:	4788      	blx	r1
    45ee:	4788      	blx	r1
    }
}
    45f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ldelay();
    45f4:	4708      	bx	r1
    45f6:	bf00      	nop
    45f8:	000045a5 	.word	0x000045a5
    45fc:	00004575 	.word	0x00004575

00004600 <say_in_toggles>:

void say_in_toggles(void) {
    4600:	b510      	push	{r4, lr}
    for (int i = 5; i > 0; i--) {
        bl_togl_Del();
    4602:	4c08      	ldr	r4, [pc, #32]	; (4624 <say_in_toggles+0x24>)
    4604:	47a0      	blx	r4
    4606:	47a0      	blx	r4
    4608:	47a0      	blx	r4
    460a:	47a0      	blx	r4
    460c:	47a0      	blx	r4
    }
    for (int i = 7; i > 0; i--) {
        ldelay();
    460e:	4906      	ldr	r1, [pc, #24]	; (4628 <say_in_toggles+0x28>)
    4610:	4788      	blx	r1
    4612:	4788      	blx	r1
    4614:	4788      	blx	r1
    4616:	4788      	blx	r1
    4618:	4788      	blx	r1
    461a:	4788      	blx	r1
    }
}
    461c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ldelay();
    4620:	4708      	bx	r1
    4622:	bf00      	nop
    4624:	000045e5 	.word	0x000045e5
    4628:	00004575 	.word	0x00004575

0000462c <say_in_blinks>:

void say_in_blinks(void) {
    462c:	b510      	push	{r4, lr}
    for (int i = 3; i > 0; i--) {
        blink();
    462e:	4803      	ldr	r0, [pc, #12]	; (463c <say_in_blinks+0x10>)
    4630:	4780      	blx	r0
    4632:	4780      	blx	r0
    }
}
    4634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        blink();
    4638:	4700      	bx	r0
    463a:	bf00      	nop
    463c:	000045c5 	.word	0x000045c5

00004640 <four_ldelay>:

void four_ldelay(void) {
    4640:	b510      	push	{r4, lr}
    for (int i = 4; i > 0; i--) {
        ldelay();
    4642:	4903      	ldr	r1, [pc, #12]	; (4650 <four_ldelay+0x10>)
    4644:	4788      	blx	r1
    4646:	4788      	blx	r1
    4648:	4788      	blx	r1
    }
}
    464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ldelay();
    464e:	4708      	bx	r1
    4650:	00004575 	.word	0x00004575

00004654 <blink_lab>:

void blink_lab(void) { // not integrated to a standalone file just yet.
    4654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int icount = 5;
    LED_output();
    4658:	4b2d      	ldr	r3, [pc, #180]	; (4710 <blink_lab+0xbc>)
    say_in_toggles();

    four_ldelay();
    465a:	4c2e      	ldr	r4, [pc, #184]	; (4714 <blink_lab+0xc0>)
    say_in_blinks();
    465c:	4d2e      	ldr	r5, [pc, #184]	; (4718 <blink_lab+0xc4>)
    say_in_toggles();
    465e:	4e2f      	ldr	r6, [pc, #188]	; (471c <blink_lab+0xc8>)
    LED_output();
    4660:	4798      	blx	r3
    say_in_toggles();
    4662:	47b0      	blx	r6
    four_ldelay();
    4664:	47a0      	blx	r4
    say_in_blinks();
    4666:	47a8      	blx	r5

    for (int i = 2; i > 0; i--) {
        four_ldelay();
    4668:	47a0      	blx	r4
    466a:	47a0      	blx	r4
    }

    say_in_blinks();
    466c:	47a8      	blx	r5

    for (int i = 4; i > 0; i--) {
        four_ldelay();
    466e:	47a0      	blx	r4
    4670:	47a0      	blx	r4
    4672:	47a0      	blx	r4
    4674:	47a0      	blx	r4
    4676:	2703      	movs	r7, #3

    for (int j = 3; j > 0; j--) {
        if (icount == 1) {
            say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks(); say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks(); say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks();
            for (int i = 4; i>0; i--) { four_ldelay(); }
            icount = RESET_COUNT;
    4678:	2305      	movs	r3, #5
    for (int j = 3; j > 0; j--) {
    467a:	3f01      	subs	r7, #1
    467c:	d12c      	bne.n	46d8 <blink_lab+0x84>
            for (int i = 12; i>0; i--) { say_in_toggles(); four_ldelay(); four_ldelay(); }
        }
        icount--;
    }
    for (int i = 8; i>0; i--) { four_ldelay(); }
    467e:	47a0      	blx	r4
    4680:	47a0      	blx	r4
    4682:	47a0      	blx	r4
    4684:	47a0      	blx	r4
    4686:	47a0      	blx	r4
    4688:	47a0      	blx	r4
    468a:	47a0      	blx	r4
    468c:	47a0      	blx	r4
    468e:	2703      	movs	r7, #3
    for (int i = 3; i>0; i--) {
        say_in_toggles(); four_ldelay(); four_ldelay();
    4690:	47b0      	blx	r6
    4692:	47a0      	blx	r4
    4694:	47a0      	blx	r4
        say_in_blinks(); four_ldelay(); four_ldelay();
    4696:	47a8      	blx	r5
    4698:	47a0      	blx	r4
    469a:	47a0      	blx	r4
    for (int i = 3; i>0; i--) {
    469c:	3f01      	subs	r7, #1
    469e:	d1f7      	bne.n	4690 <blink_lab+0x3c>
    }
    for (int i = 8; i>0; i--) { four_ldelay(); }
    46a0:	47a0      	blx	r4
    46a2:	47a0      	blx	r4
    46a4:	47a0      	blx	r4
    46a6:	47a0      	blx	r4
    46a8:	47a0      	blx	r4
    46aa:	47a0      	blx	r4
    46ac:	47a0      	blx	r4
    46ae:	47a0      	blx	r4
    for (int i = 8; i>0; i--) { four_ldelay(); }
    46b0:	47a0      	blx	r4
    46b2:	47a0      	blx	r4
    46b4:	47a0      	blx	r4
    46b6:	47a0      	blx	r4
    46b8:	47a0      	blx	r4
    46ba:	47a0      	blx	r4
    46bc:	47a0      	blx	r4
    46be:	47a0      	blx	r4
        say_in_blinks(); four_ldelay(); four_ldelay();
    46c0:	47a8      	blx	r5
    46c2:	47a0      	blx	r4
    46c4:	47a0      	blx	r4
        say_in_blinks(); four_ldelay(); four_ldelay();
    46c6:	47a8      	blx	r5
    46c8:	47a0      	blx	r4
    46ca:	47a0      	blx	r4
        say_in_blinks(); four_ldelay(); four_ldelay();
    46cc:	47a8      	blx	r5
    46ce:	47a0      	blx	r4
    46d0:	47a0      	blx	r4
    caution_lamp(); // a trap
    46d2:	4b13      	ldr	r3, [pc, #76]	; (4720 <blink_lab+0xcc>)
    46d4:	4798      	blx	r3
    46d6:	e7fe      	b.n	46d6 <blink_lab+0x82>
        icount--;
    46d8:	3b01      	subs	r3, #1
        if (icount == 1) {
    46da:	2b01      	cmp	r3, #1
    46dc:	d1cd      	bne.n	467a <blink_lab+0x26>
            say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks(); say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks(); say_in_toggles(); four_ldelay(); four_ldelay(); say_in_blinks();
    46de:	47b0      	blx	r6
    46e0:	47a0      	blx	r4
    46e2:	47a0      	blx	r4
    46e4:	47a8      	blx	r5
    46e6:	47b0      	blx	r6
    46e8:	47a0      	blx	r4
    46ea:	47a0      	blx	r4
    46ec:	47a8      	blx	r5
    46ee:	47b0      	blx	r6
    46f0:	47a0      	blx	r4
    46f2:	47a0      	blx	r4
    46f4:	47a8      	blx	r5
            for (int i = 4; i>0; i--) { four_ldelay(); }
    46f6:	47a0      	blx	r4
    46f8:	47a0      	blx	r4
    46fa:	47a0      	blx	r4
    46fc:	47a0      	blx	r4
    46fe:	f04f 080c 	mov.w	r8, #12
            for (int i = 12; i>0; i--) { say_in_toggles(); four_ldelay(); four_ldelay(); }
    4702:	47b0      	blx	r6
    4704:	47a0      	blx	r4
    4706:	47a0      	blx	r4
    4708:	f1b8 0801 	subs.w	r8, r8, #1
    470c:	d1f9      	bne.n	4702 <blink_lab+0xae>
    470e:	e7b3      	b.n	4678 <blink_lab+0x24>
    4710:	00004545 	.word	0x00004545
    4714:	00004641 	.word	0x00004641
    4718:	0000462d 	.word	0x0000462d
    471c:	00004601 	.word	0x00004601
    4720:	00004521 	.word	0x00004521

00004724 <__libc_init_array>:
    4724:	b570      	push	{r4, r5, r6, lr}
    4726:	4e0d      	ldr	r6, [pc, #52]	; (475c <__libc_init_array+0x38>)
    4728:	4c0d      	ldr	r4, [pc, #52]	; (4760 <__libc_init_array+0x3c>)
    472a:	1ba4      	subs	r4, r4, r6
    472c:	10a4      	asrs	r4, r4, #2
    472e:	2500      	movs	r5, #0
    4730:	42a5      	cmp	r5, r4
    4732:	d109      	bne.n	4748 <__libc_init_array+0x24>
    4734:	4e0b      	ldr	r6, [pc, #44]	; (4764 <__libc_init_array+0x40>)
    4736:	4c0c      	ldr	r4, [pc, #48]	; (4768 <__libc_init_array+0x44>)
    4738:	f000 f818 	bl	476c <_init>
    473c:	1ba4      	subs	r4, r4, r6
    473e:	10a4      	asrs	r4, r4, #2
    4740:	2500      	movs	r5, #0
    4742:	42a5      	cmp	r5, r4
    4744:	d105      	bne.n	4752 <__libc_init_array+0x2e>
    4746:	bd70      	pop	{r4, r5, r6, pc}
    4748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    474c:	4798      	blx	r3
    474e:	3501      	adds	r5, #1
    4750:	e7ee      	b.n	4730 <__libc_init_array+0xc>
    4752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4756:	4798      	blx	r3
    4758:	3501      	adds	r5, #1
    475a:	e7f2      	b.n	4742 <__libc_init_array+0x1e>
    475c:	00004778 	.word	0x00004778
    4760:	00004778 	.word	0x00004778
    4764:	00004778 	.word	0x00004778
    4768:	0000477c 	.word	0x0000477c

0000476c <_init>:
    476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    476e:	bf00      	nop
    4770:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4772:	bc08      	pop	{r3}
    4774:	469e      	mov	lr, r3
    4776:	4770      	bx	lr

00004778 <__init_array_start>:
    4778:	00004289 	.word	0x00004289

0000477c <_fini>:
    477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    477e:	bf00      	nop
    4780:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4782:	bc08      	pop	{r3}
    4784:	469e      	mov	lr, r3
    4786:	4770      	bx	lr

00004788 <__fini_array_start>:
    4788:	00004265 	.word	0x00004265
