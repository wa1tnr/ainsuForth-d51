
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f8  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000044f8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00010004  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010004  2**0
                  CONTENTS
  4 .bss          0000002c  20000004  000044fc  00010004  2**2
                  ALLOC
  5 .stack        0000c000  20000030  00004528  00010004  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  7 .comment      0000007f  00000000  00000000  00010032  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004cff  00000000  00000000  000100b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a03  00000000  00000000  00014db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000128  00000000  00000000  000157b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000158db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001cf7  00000000  00000000  00015a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b01  00000000  00000000  00017752  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000dc089  00000000  00000000  0001a253  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000270  00000000  00000000  000f62dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000004f0  00000000  00000000  000f654c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	30 c0 00 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     0.. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40bc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40cc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ec:	ed 42 00 00 00 00 00 00 b5 42 00 00 ed 42 00 00     .B.......B...B..
    40fc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    410c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    411c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    412c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    413c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    414c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    4180:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4190:	00 00 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    41a0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41f0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4200:	ed 42 00 00 00 00 00 00 00 00 00 00 ed 42 00 00     .B...........B..
    4210:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4220:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4230:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4240:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4250:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4260:	00 00 00 00                                         ....

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000004 	.word	0x20000004
    4280:	00000000 	.word	0x00000000
    4284:	000044f8 	.word	0x000044f8

00004288 <frame_dummy>:
    4288:	b508      	push	{r3, lr}
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <frame_dummy+0x10>)
    428c:	b11b      	cbz	r3, 4296 <frame_dummy+0xe>
    428e:	4903      	ldr	r1, [pc, #12]	; (429c <frame_dummy+0x14>)
    4290:	4803      	ldr	r0, [pc, #12]	; (42a0 <frame_dummy+0x18>)
    4292:	f3af 8000 	nop.w
    4296:	bd08      	pop	{r3, pc}
    4298:	00000000 	.word	0x00000000
    429c:	20000008 	.word	0x20000008
    42a0:	000044f8 	.word	0x000044f8

000042a4 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    42a4:	4b01      	ldr	r3, [pc, #4]	; (42ac <SystemInit+0x8>)
    42a6:	4a02      	ldr	r2, [pc, #8]	; (42b0 <SystemInit+0xc>)
    42a8:	601a      	str	r2, [r3, #0]
	return;
}
    42aa:	4770      	bx	lr
    42ac:	20000000 	.word	0x20000000
    42b0:	02dc6c00 	.word	0x02dc6c00

000042b4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    42b4:	4a0b      	ldr	r2, [pc, #44]	; (42e4 <RAMECC_Handler+0x30>)
    42b6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    42b8:	b082      	sub	sp, #8
    42ba:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    42bc:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    42be:	9b01      	ldr	r3, [sp, #4]
    42c0:	0799      	lsls	r1, r3, #30
    42c2:	d505      	bpl.n	42d0 <RAMECC_Handler+0x1c>
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <RAMECC_Handler+0x34>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	b113      	cbz	r3, 42d0 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    42ca:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    42cc:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    42ce:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	07db      	lsls	r3, r3, #31
    42d4:	d504      	bpl.n	42e0 <RAMECC_Handler+0x2c>
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <RAMECC_Handler+0x34>)
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	b10b      	cbz	r3, 42e0 <RAMECC_Handler+0x2c>
    42dc:	4a01      	ldr	r2, [pc, #4]	; (42e4 <RAMECC_Handler+0x30>)
    42de:	e7f4      	b.n	42ca <RAMECC_Handler+0x16>
}
    42e0:	b002      	add	sp, #8
    42e2:	4770      	bx	lr
    42e4:	41020000 	.word	0x41020000
    42e8:	20000020 	.word	0x20000020

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
    42f2:	4a14      	ldr	r2, [pc, #80]	; (4344 <Reset_Handler+0x54>)
    42f4:	4b14      	ldr	r3, [pc, #80]	; (4348 <Reset_Handler+0x58>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d003      	beq.n	4302 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    42fa:	4914      	ldr	r1, [pc, #80]	; (434c <Reset_Handler+0x5c>)
    42fc:	3a04      	subs	r2, #4
    42fe:	428b      	cmp	r3, r1
    4300:	d318      	bcc.n	4334 <Reset_Handler+0x44>
{
    4302:	4b13      	ldr	r3, [pc, #76]	; (4350 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
    4304:	4a13      	ldr	r2, [pc, #76]	; (4354 <Reset_Handler+0x64>)
		*pDest++ = 0;
    4306:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
    4308:	4293      	cmp	r3, r2
    430a:	d318      	bcc.n	433e <Reset_Handler+0x4e>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    430c:	4a12      	ldr	r2, [pc, #72]	; (4358 <Reset_Handler+0x68>)
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <Reset_Handler+0x6c>)
    4310:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4314:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
    4316:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    431a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    431e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4326:	f3bf 8f6f 	isb	sy
	__libc_init_array();
    432a:	4b0d      	ldr	r3, [pc, #52]	; (4360 <Reset_Handler+0x70>)
    432c:	4798      	blx	r3
	main();
    432e:	4b0d      	ldr	r3, [pc, #52]	; (4364 <Reset_Handler+0x74>)
    4330:	4798      	blx	r3
    4332:	e7fe      	b.n	4332 <Reset_Handler+0x42>
			*pDest++ = *pSrc++;
    4334:	f852 0f04 	ldr.w	r0, [r2, #4]!
    4338:	f843 0b04 	str.w	r0, [r3], #4
    433c:	e7df      	b.n	42fe <Reset_Handler+0xe>
		*pDest++ = 0;
    433e:	f843 1b04 	str.w	r1, [r3], #4
    4342:	e7e1      	b.n	4308 <Reset_Handler+0x18>
    4344:	000044f8 	.word	0x000044f8
    4348:	20000000 	.word	0x20000000
    434c:	20000004 	.word	0x20000004
    4350:	20000004 	.word	0x20000004
    4354:	20000030 	.word	0x20000030
    4358:	00004000 	.word	0x00004000
    435c:	e000ed00 	.word	0xe000ed00
    4360:	00004491 	.word	0x00004491
    4364:	00004409 	.word	0x00004409

00004368 <uSec>:
#include "gpio_local.h"
#include "usart.h"

/* Many changes: by wa1tnr, July 2018 */

void uSec(void) {
    4368:	b082      	sub	sp, #8
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    436a:	2301      	movs	r3, #1
    436c:	9301      	str	r3, [sp, #4]
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b01      	cmp	r3, #1
    4372:	dd01      	ble.n	4378 <uSec+0x10>
        // nothing
    }
}
    4374:	b002      	add	sp, #8
    4376:	4770      	bx	lr
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    4378:	9b01      	ldr	r3, [sp, #4]
    437a:	3301      	adds	r3, #1
    437c:	e7f6      	b.n	436c <uSec+0x4>
	...

00004380 <short_timer>:

void short_timer(void) { // human blinkie timescale
    4380:	b508      	push	{r3, lr}
    4382:	4a03      	ldr	r2, [pc, #12]	; (4390 <short_timer+0x10>)
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
        uSec();
    4384:	4903      	ldr	r1, [pc, #12]	; (4394 <short_timer+0x14>)
    4386:	4788      	blx	r1
    for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
    4388:	3a01      	subs	r2, #1
    438a:	d1fc      	bne.n	4386 <short_timer+0x6>
    }
}
    438c:	bd08      	pop	{r3, pc}
    438e:	bf00      	nop
    4390:	0020a7d0 	.word	0x0020a7d0
    4394:	00004369 	.word	0x00004369

00004398 <raise_LED_pins>:

void raise_LED_pins(void) { // multiple target boards
    4398:	b510      	push	{r4, lr}
    // raise_D13(); raise_D12();
    raise_D13_metro();   // Metro M4 Express
    439a:	4b03      	ldr	r3, [pc, #12]	; (43a8 <raise_LED_pins+0x10>)
    439c:	4798      	blx	r3
    raise_D13_feather(); // Feather M4 Express
    439e:	4b03      	ldr	r3, [pc, #12]	; (43ac <raise_LED_pins+0x14>)
}
    43a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    raise_D13_feather(); // Feather M4 Express
    43a4:	4718      	bx	r3
    43a6:	bf00      	nop
    43a8:	00004451 	.word	0x00004451
    43ac:	00004461 	.word	0x00004461

000043b0 <lower_LED_pins>:

void lower_LED_pins(void) {
    43b0:	b510      	push	{r4, lr}
    // lower_D13(); lower_D12();
    lower_D13_metro();
    43b2:	4b03      	ldr	r3, [pc, #12]	; (43c0 <lower_LED_pins+0x10>)
    43b4:	4798      	blx	r3
    lower_D13_feather();
    43b6:	4b03      	ldr	r3, [pc, #12]	; (43c4 <lower_LED_pins+0x14>)
}
    43b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lower_D13_feather();
    43bc:	4718      	bx	r3
    43be:	bf00      	nop
    43c0:	00004471 	.word	0x00004471
    43c4:	00004481 	.word	0x00004481

000043c8 <blink_LED>:

void blink_LED(void) {
    43c8:	b510      	push	{r4, lr}
    // raise_D13(); raise_D12();
    raise_LED_pins(); // Feather M4 or Metro M4
    43ca:	4b05      	ldr	r3, [pc, #20]	; (43e0 <blink_LED+0x18>)
    short_timer(); // should be first instance of use of this timer
    43cc:	4c05      	ldr	r4, [pc, #20]	; (43e4 <blink_LED+0x1c>)
    raise_LED_pins(); // Feather M4 or Metro M4
    43ce:	4798      	blx	r3
    short_timer(); // should be first instance of use of this timer
    43d0:	47a0      	blx	r4
    lower_LED_pins(); // lower_D13(); lower_D12();
    43d2:	4b05      	ldr	r3, [pc, #20]	; (43e8 <blink_LED+0x20>)
    43d4:	4798      	blx	r3
    short_timer();
    43d6:	4623      	mov	r3, r4
}
    43d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    short_timer();
    43dc:	4718      	bx	r3
    43de:	bf00      	nop
    43e0:	00004399 	.word	0x00004399
    43e4:	00004381 	.word	0x00004381
    43e8:	000043b1 	.word	0x000043b1

000043ec <nmain>:

    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
}
#endif // #ifdef JAKES_CLOCK

void nmain(void) {
    43ec:	b508      	push	{r3, lr}
        raise_LED_pins(); // raise_D13(); raise_D12();
    43ee:	4b03      	ldr	r3, [pc, #12]	; (43fc <nmain+0x10>)
        // activity_LED_demo();
	while (1) {
            flicker_LED();
    43f0:	4d03      	ldr	r5, [pc, #12]	; (4400 <nmain+0x14>)
            // short_timer();

            // this demo stops everything:
            // USUART_5_demo(); // let's see what the cat drug in
            short_timer();
    43f2:	4c04      	ldr	r4, [pc, #16]	; (4404 <nmain+0x18>)
        raise_LED_pins(); // raise_D13(); raise_D12();
    43f4:	4798      	blx	r3
            flicker_LED();
    43f6:	47a8      	blx	r5
            short_timer();
    43f8:	47a0      	blx	r4
    43fa:	e7fc      	b.n	43f6 <nmain+0xa>
    43fc:	00004399 	.word	0x00004399
    4400:	000043c9 	.word	0x000043c9
    4404:	00004381 	.word	0x00004381

00004408 <main>:
	}
}

int main(void) {
    4408:	b508      	push	{r3, lr}
    SystemInit();
    440a:	4b03      	ldr	r3, [pc, #12]	; (4418 <main+0x10>)
    440c:	4798      	blx	r3
    // clock_init();
    init_act_LED();
    440e:	4b03      	ldr	r3, [pc, #12]	; (441c <main+0x14>)
    4410:	4798      	blx	r3
    nmain();
    4412:	4b03      	ldr	r3, [pc, #12]	; (4420 <main+0x18>)
    4414:	4798      	blx	r3
    4416:	bf00      	nop
    4418:	000042a5 	.word	0x000042a5
    441c:	00004425 	.word	0x00004425
    4420:	000043ed 	.word	0x000043ed

00004424 <init_act_LED>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4424:	4b07      	ldr	r3, [pc, #28]	; (4444 <init_act_LED+0x20>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4426:	4908      	ldr	r1, [pc, #32]	; (4448 <init_act_LED+0x24>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4428:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    442c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    442e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4432:	629a      	str	r2, [r3, #40]	; 0x28
    4434:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4436:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    443a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    443c:	629a      	str	r2, [r3, #40]	; 0x28
    443e:	4a03      	ldr	r2, [pc, #12]	; (444c <init_act_LED+0x28>)
    4440:	629a      	str	r2, [r3, #40]	; 0x28
// #include "gpio_local.h"

void init_act_LED(void) {
    gpio_set_pin_direction(PA23, GPIO_DIRECTION_OUT);
    gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
}
    4442:	4770      	bx	lr
    4444:	41008000 	.word	0x41008000
    4448:	c0000080 	.word	0xc0000080
    444c:	c0000001 	.word	0xc0000001

00004450 <raise_D13_metro>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4450:	4b02      	ldr	r3, [pc, #8]	; (445c <raise_D13_metro+0xc>)
    4452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4456:	619a      	str	r2, [r3, #24]

void raise_D13_metro(void) { // Metro M4 Express
    gpio_set_pin_level(PA16, true);
}
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	41008000 	.word	0x41008000

00004460 <raise_D13_feather>:
    4460:	4b02      	ldr	r3, [pc, #8]	; (446c <raise_D13_feather+0xc>)
    4462:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4466:	619a      	str	r2, [r3, #24]

void raise_D13_feather(void) { // Feather M4 Express
    gpio_set_pin_level(PA23, true);
}
    4468:	4770      	bx	lr
    446a:	bf00      	nop
    446c:	41008000 	.word	0x41008000

00004470 <lower_D13_metro>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4470:	4b02      	ldr	r3, [pc, #8]	; (447c <lower_D13_metro+0xc>)
    4472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4476:	615a      	str	r2, [r3, #20]

void lower_D13_metro(void) {
    gpio_set_pin_level(PA16, false);
}
    4478:	4770      	bx	lr
    447a:	bf00      	nop
    447c:	41008000 	.word	0x41008000

00004480 <lower_D13_feather>:
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <lower_D13_feather+0xc>)
    4482:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4486:	615a      	str	r2, [r3, #20]

void lower_D13_feather(void) {
    gpio_set_pin_level(PA23, false);
}
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	41008000 	.word	0x41008000

00004490 <__libc_init_array>:
    4490:	b570      	push	{r4, r5, r6, lr}
    4492:	4e0d      	ldr	r6, [pc, #52]	; (44c8 <__libc_init_array+0x38>)
    4494:	4c0d      	ldr	r4, [pc, #52]	; (44cc <__libc_init_array+0x3c>)
    4496:	1ba4      	subs	r4, r4, r6
    4498:	10a4      	asrs	r4, r4, #2
    449a:	2500      	movs	r5, #0
    449c:	42a5      	cmp	r5, r4
    449e:	d109      	bne.n	44b4 <__libc_init_array+0x24>
    44a0:	4e0b      	ldr	r6, [pc, #44]	; (44d0 <__libc_init_array+0x40>)
    44a2:	4c0c      	ldr	r4, [pc, #48]	; (44d4 <__libc_init_array+0x44>)
    44a4:	f000 f818 	bl	44d8 <_init>
    44a8:	1ba4      	subs	r4, r4, r6
    44aa:	10a4      	asrs	r4, r4, #2
    44ac:	2500      	movs	r5, #0
    44ae:	42a5      	cmp	r5, r4
    44b0:	d105      	bne.n	44be <__libc_init_array+0x2e>
    44b2:	bd70      	pop	{r4, r5, r6, pc}
    44b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    44b8:	4798      	blx	r3
    44ba:	3501      	adds	r5, #1
    44bc:	e7ee      	b.n	449c <__libc_init_array+0xc>
    44be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    44c2:	4798      	blx	r3
    44c4:	3501      	adds	r5, #1
    44c6:	e7f2      	b.n	44ae <__libc_init_array+0x1e>
    44c8:	000044e4 	.word	0x000044e4
    44cc:	000044e4 	.word	0x000044e4
    44d0:	000044e4 	.word	0x000044e4
    44d4:	000044e8 	.word	0x000044e8

000044d8 <_init>:
    44d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44da:	bf00      	nop
    44dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44de:	bc08      	pop	{r3}
    44e0:	469e      	mov	lr, r3
    44e2:	4770      	bx	lr

000044e4 <__init_array_start>:
    44e4:	00004289 	.word	0x00004289

000044e8 <_fini>:
    44e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ea:	bf00      	nop
    44ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    44ee:	bc08      	pop	{r3}
    44f0:	469e      	mov	lr, r3
    44f2:	4770      	bx	lr

000044f4 <__fini_array_start>:
    44f4:	00004265 	.word	0x00004265
