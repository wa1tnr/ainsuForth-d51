
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000045dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00010004  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010004  2**0
                  CONTENTS
  4 .bss          0000002c  20000004  000045e0  00010004  2**2
                  ALLOC
  5 .stack        0000c000  20000030  0000460c  00010004  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  7 .comment      0000007f  00000000  00000000  00010032  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004d76  00000000  00000000  000100b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a03  00000000  00000000  00014e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000128  00000000  00000000  0001582a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  00015952  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001d09  00000000  00000000  00015ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b03  00000000  00000000  000177db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000dc109  00000000  00000000  0001a2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000270  00000000  00000000  000f63e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000004f0  00000000  00000000  000f6658  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	30 c0 00 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     0.. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40bc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40cc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ec:	ed 42 00 00 00 00 00 00 b5 42 00 00 ed 42 00 00     .B.......B...B..
    40fc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    410c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    411c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    412c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    413c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    414c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    4180:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4190:	00 00 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    41a0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41f0:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4200:	ed 42 00 00 00 00 00 00 00 00 00 00 ed 42 00 00     .B...........B..
    4210:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4220:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4230:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4240:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4250:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4260:	00 00 00 00                                         ....

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	20000004 	.word	0x20000004
    4280:	00000000 	.word	0x00000000
    4284:	000045dc 	.word	0x000045dc

00004288 <frame_dummy>:
    4288:	b508      	push	{r3, lr}
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <frame_dummy+0x10>)
    428c:	b11b      	cbz	r3, 4296 <frame_dummy+0xe>
    428e:	4903      	ldr	r1, [pc, #12]	; (429c <frame_dummy+0x14>)
    4290:	4803      	ldr	r0, [pc, #12]	; (42a0 <frame_dummy+0x18>)
    4292:	f3af 8000 	nop.w
    4296:	bd08      	pop	{r3, pc}
    4298:	00000000 	.word	0x00000000
    429c:	20000008 	.word	0x20000008
    42a0:	000045dc 	.word	0x000045dc

000042a4 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
    42a4:	4b01      	ldr	r3, [pc, #4]	; (42ac <SystemInit+0x8>)
    42a6:	4a02      	ldr	r2, [pc, #8]	; (42b0 <SystemInit+0xc>)
    42a8:	601a      	str	r2, [r3, #0]
	return;
}
    42aa:	4770      	bx	lr
    42ac:	20000000 	.word	0x20000000
    42b0:	02dc6c00 	.word	0x02dc6c00

000042b4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    42b4:	4a0b      	ldr	r2, [pc, #44]	; (42e4 <RAMECC_Handler+0x30>)
    42b6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    42b8:	b082      	sub	sp, #8
    42ba:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    42bc:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    42be:	9b01      	ldr	r3, [sp, #4]
    42c0:	0799      	lsls	r1, r3, #30
    42c2:	d505      	bpl.n	42d0 <RAMECC_Handler+0x1c>
    42c4:	4b08      	ldr	r3, [pc, #32]	; (42e8 <RAMECC_Handler+0x34>)
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	b113      	cbz	r3, 42d0 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    42ca:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    42cc:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    42ce:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    42d0:	9b01      	ldr	r3, [sp, #4]
    42d2:	07db      	lsls	r3, r3, #31
    42d4:	d504      	bpl.n	42e0 <RAMECC_Handler+0x2c>
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <RAMECC_Handler+0x34>)
    42d8:	685b      	ldr	r3, [r3, #4]
    42da:	b10b      	cbz	r3, 42e0 <RAMECC_Handler+0x2c>
    42dc:	4a01      	ldr	r2, [pc, #4]	; (42e4 <RAMECC_Handler+0x30>)
    42de:	e7f4      	b.n	42ca <RAMECC_Handler+0x16>
}
    42e0:	b002      	add	sp, #8
    42e2:	4770      	bx	lr
    42e4:	41020000 	.word	0x41020000
    42e8:	20000020 	.word	0x20000020

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
    42f2:	4a14      	ldr	r2, [pc, #80]	; (4344 <Reset_Handler+0x54>)
    42f4:	4b14      	ldr	r3, [pc, #80]	; (4348 <Reset_Handler+0x58>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d003      	beq.n	4302 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
    42fa:	4914      	ldr	r1, [pc, #80]	; (434c <Reset_Handler+0x5c>)
    42fc:	3a04      	subs	r2, #4
    42fe:	428b      	cmp	r3, r1
    4300:	d318      	bcc.n	4334 <Reset_Handler+0x44>
{
    4302:	4b13      	ldr	r3, [pc, #76]	; (4350 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
    4304:	4a13      	ldr	r2, [pc, #76]	; (4354 <Reset_Handler+0x64>)
		*pDest++ = 0;
    4306:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
    4308:	4293      	cmp	r3, r2
    430a:	d318      	bcc.n	433e <Reset_Handler+0x4e>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
    430c:	4a12      	ldr	r2, [pc, #72]	; (4358 <Reset_Handler+0x68>)
    430e:	4b13      	ldr	r3, [pc, #76]	; (435c <Reset_Handler+0x6c>)
    4310:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4314:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
    4316:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    431a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    431e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4326:	f3bf 8f6f 	isb	sy
	__libc_init_array();
    432a:	4b0d      	ldr	r3, [pc, #52]	; (4360 <Reset_Handler+0x70>)
    432c:	4798      	blx	r3
	main();
    432e:	4b0d      	ldr	r3, [pc, #52]	; (4364 <Reset_Handler+0x74>)
    4330:	4798      	blx	r3
    4332:	e7fe      	b.n	4332 <Reset_Handler+0x42>
			*pDest++ = *pSrc++;
    4334:	f852 0f04 	ldr.w	r0, [r2, #4]!
    4338:	f843 0b04 	str.w	r0, [r3], #4
    433c:	e7df      	b.n	42fe <Reset_Handler+0xe>
		*pDest++ = 0;
    433e:	f843 1b04 	str.w	r1, [r3], #4
    4342:	e7e1      	b.n	4308 <Reset_Handler+0x18>
    4344:	000045dc 	.word	0x000045dc
    4348:	20000000 	.word	0x20000000
    434c:	20000004 	.word	0x20000004
    4350:	20000004 	.word	0x20000004
    4354:	20000030 	.word	0x20000030
    4358:	00004000 	.word	0x00004000
    435c:	e000ed00 	.word	0xe000ed00
    4360:	00004575 	.word	0x00004575
    4364:	000044e5 	.word	0x000044e5

00004368 <uSec>:
#include "gpio_local.h"
#include "usuart.h"

/* Many changes: by wa1tnr, July 2018 */

void uSec(void) {
    4368:	b082      	sub	sp, #8
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    436a:	2301      	movs	r3, #1
    436c:	9301      	str	r3, [sp, #4]
    436e:	9b01      	ldr	r3, [sp, #4]
    4370:	2b01      	cmp	r3, #1
    4372:	dd01      	ble.n	4378 <uSec+0x10>
        // nothing
    }
}
    4374:	b002      	add	sp, #8
    4376:	4770      	bx	lr
    for (volatile int i = 1; i < 2; i++) { // needs calibration
    4378:	9b01      	ldr	r3, [sp, #4]
    437a:	3301      	adds	r3, #1
    437c:	e7f6      	b.n	436c <uSec+0x4>
	...

00004380 <short_timer>:

void short_timer(void) { // human blinkie timescale
    4380:	b508      	push	{r3, lr}
    4382:	4a03      	ldr	r2, [pc, #12]	; (4390 <short_timer+0x10>)
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
        uSec();
    4384:	4903      	ldr	r1, [pc, #12]	; (4394 <short_timer+0x14>)
    4386:	4788      	blx	r1
    for(on_time =       2140112; on_time > 0; on_time--) { // 21.4 million
    4388:	3a01      	subs	r2, #1
    438a:	d1fc      	bne.n	4386 <short_timer+0x6>
    }
}
    438c:	bd08      	pop	{r3, pc}
    438e:	bf00      	nop
    4390:	0020a7d0 	.word	0x0020a7d0
    4394:	00004369 	.word	0x00004369

00004398 <raise_LED_pins>:

void raise_LED_pins(void) { // multiple target boards
    4398:	b510      	push	{r4, lr}
    // raise_D13(); raise_D12();
    raise_D13_metro();   // Metro M4 Express
    439a:	4b03      	ldr	r3, [pc, #12]	; (43a8 <raise_LED_pins+0x10>)
    439c:	4798      	blx	r3
    raise_D13_feather(); // Feather M4 Express
    439e:	4b03      	ldr	r3, [pc, #12]	; (43ac <raise_LED_pins+0x14>)
}
    43a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    raise_D13_feather(); // Feather M4 Express
    43a4:	4718      	bx	r3
    43a6:	bf00      	nop
    43a8:	00004535 	.word	0x00004535
    43ac:	00004545 	.word	0x00004545

000043b0 <lower_LED_pins>:

void lower_LED_pins(void) {
    43b0:	b510      	push	{r4, lr}
    // lower_D13(); lower_D12();
    lower_D13_metro();
    43b2:	4b03      	ldr	r3, [pc, #12]	; (43c0 <lower_LED_pins+0x10>)
    43b4:	4798      	blx	r3
    lower_D13_feather();
    43b6:	4b03      	ldr	r3, [pc, #12]	; (43c4 <lower_LED_pins+0x14>)
}
    43b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lower_D13_feather();
    43bc:	4718      	bx	r3
    43be:	bf00      	nop
    43c0:	00004555 	.word	0x00004555
    43c4:	00004565 	.word	0x00004565

000043c8 <blink_LED>:

void blink_LED(void) {
    43c8:	b510      	push	{r4, lr}
    // raise_D13(); raise_D12();
    raise_LED_pins(); // Feather M4 or Metro M4
    43ca:	4b05      	ldr	r3, [pc, #20]	; (43e0 <blink_LED+0x18>)
    short_timer(); // should be first instance of use of this timer
    43cc:	4c05      	ldr	r4, [pc, #20]	; (43e4 <blink_LED+0x1c>)
    raise_LED_pins(); // Feather M4 or Metro M4
    43ce:	4798      	blx	r3
    short_timer(); // should be first instance of use of this timer
    43d0:	47a0      	blx	r4
    lower_LED_pins(); // lower_D13(); lower_D12();
    43d2:	4b05      	ldr	r3, [pc, #20]	; (43e8 <blink_LED+0x20>)
    43d4:	4798      	blx	r3
    short_timer();
    43d6:	4623      	mov	r3, r4
}
    43d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    short_timer();
    43dc:	4718      	bx	r3
    43de:	bf00      	nop
    43e0:	00004399 	.word	0x00004399
    43e4:	00004381 	.word	0x00004381
    43e8:	000043b1 	.word	0x000043b1

000043ec <clock_init>:
// clock clock who's there ///////////////////

#undef JAKES_CLOCK
#ifndef JAKES_CLOCK
void clock_init(void){ // Jake Read
    NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(0);
    43ec:	4a30      	ldr	r2, [pc, #192]	; (44b0 <clock_init+0xc4>)
    43ee:	8813      	ldrh	r3, [r2, #0]
    43f0:	b29b      	uxth	r3, r3
    43f2:	8013      	strh	r3, [r2, #0]
    GCLK->CTRLA.bit.SWRST = 1;
    43f4:	4b2f      	ldr	r3, [pc, #188]	; (44b4 <clock_init+0xc8>)
    43f6:	781a      	ldrb	r2, [r3, #0]
    43f8:	f042 0201 	orr.w	r2, r2, #1
    43fc:	701a      	strb	r2, [r3, #0]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_SWRST);
    43fe:	685a      	ldr	r2, [r3, #4]
    4400:	07d0      	lsls	r0, r2, #31
    4402:	d4fc      	bmi.n	43fe <clock_init+0x12>
    GCLK->GENCTRL[3].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    4404:	f44f 7282 	mov.w	r2, #260	; 0x104
    4408:	62da      	str	r2, [r3, #44]	; 0x2c
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL3);
    440a:	685a      	ldr	r2, [r3, #4]
    440c:	0691      	lsls	r1, r2, #26
    440e:	d4fc      	bmi.n	440a <clock_init+0x1e>
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    4410:	f44f 7282 	mov.w	r2, #260	; 0x104
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    4414:	4927      	ldr	r1, [pc, #156]	; (44b4 <clock_init+0xc8>)
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    4416:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    4418:	684a      	ldr	r2, [r1, #4]
    441a:	f012 0204 	ands.w	r2, r2, #4
    441e:	d1fb      	bne.n	4418 <clock_init+0x2c>

    OSCCTRL->DFLLCTRLA.reg = 0;
    4420:	4b25      	ldr	r3, [pc, #148]	; (44b8 <clock_init+0xcc>)
    4422:	771a      	strb	r2, [r3, #28]
    OSCCTRL->DFLLMUL.reg = OSCCTRL_DFLLMUL_CSTEP(0x1) | OSCCTRL_DFLLMUL_FSTEP(0x1) | OSCCTRL_DFLLMUL_MUL(0);
    4424:	4a25      	ldr	r2, [pc, #148]	; (44bc <clock_init+0xd0>)
    4426:	629a      	str	r2, [r3, #40]	; 0x28
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLMUL);
    4428:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    442c:	f012 0210 	ands.w	r2, r2, #16
    4430:	d1fa      	bne.n	4428 <clock_init+0x3c>
    OSCCTRL->DFLLCTRLB.reg = 0;
    4432:	f883 2020 	strb.w	r2, [r3, #32]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLCTRLB);
    4436:	4b20      	ldr	r3, [pc, #128]	; (44b8 <clock_init+0xcc>)
    4438:	4619      	mov	r1, r3
    443a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
    443e:	0752      	lsls	r2, r2, #29
    4440:	d4fb      	bmi.n	443a <clock_init+0x4e>
    OSCCTRL->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ENABLE;
    4442:	7f1a      	ldrb	r2, [r3, #28]
    4444:	f042 0202 	orr.w	r2, r2, #2
    4448:	771a      	strb	r2, [r3, #28]
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE);
    444a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    444e:	079b      	lsls	r3, r3, #30
    4450:	d4fb      	bmi.n	444a <clock_init+0x5e>
    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
    4452:	2398      	movs	r3, #152	; 0x98
    while(!OSCCTRL->STATUS.bit.DFLLRDY);
    4454:	4a18      	ldr	r2, [pc, #96]	; (44b8 <clock_init+0xcc>)
    OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
    4456:	f881 3020 	strb.w	r3, [r1, #32]
    while(!OSCCTRL->STATUS.bit.DFLLRDY);
    445a:	6913      	ldr	r3, [r2, #16]
    445c:	05d8      	lsls	r0, r3, #23
    445e:	d5fc      	bpl.n	445a <clock_init+0x6e>

    GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DFLL_Val) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(24u);
    4460:	4b14      	ldr	r3, [pc, #80]	; (44b4 <clock_init+0xc8>)
    4462:	4a17      	ldr	r2, [pc, #92]	; (44c0 <clock_init+0xd4>)
    4464:	635a      	str	r2, [r3, #52]	; 0x34
    while(GCLK->SYNCBUSY.bit.GENCTRL5);
    4466:	685a      	ldr	r2, [r3, #4]
    4468:	0611      	lsls	r1, r2, #24
    446a:	d4fc      	bmi.n	4466 <clock_init+0x7a>

    GCLK->PCHCTRL[OSCCTRL_GCLK_ID_FDPLL0].reg = (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(GCLK_PCHCTRL_GEN_GCLK5_Val);
    446c:	2245      	movs	r2, #69	; 0x45
    446e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0x00) | OSCCTRL_DPLLRATIO_LDR(59);
    4472:	4b11      	ldr	r3, [pc, #68]	; (44b8 <clock_init+0xcc>)
    4474:	223b      	movs	r2, #59	; 0x3b
    4476:	635a      	str	r2, [r3, #52]	; 0x34
    while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.DPLLRATIO);
    4478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    447a:	0752      	lsls	r2, r2, #29
    447c:	d4fc      	bmi.n	4478 <clock_init+0x8c>
    OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK | OSCCTRL_DPLLCTRLB_LBYPASS;
    447e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4482:	639a      	str	r2, [r3, #56]	; 0x38
    OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    4484:	2202      	movs	r2, #2
    4486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    while(OSCCTRL->Dpll[0].DPLLSTATUS.bit.CLKRDY == 0 || OSCCTRL->Dpll[0].DPLLSTATUS.bit.LOCK == 0);
    448a:	4b0b      	ldr	r3, [pc, #44]	; (44b8 <clock_init+0xcc>)
    448c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    448e:	0790      	lsls	r0, r2, #30
    4490:	d5fc      	bpl.n	448c <clock_init+0xa0>
    4492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    4494:	07d1      	lsls	r1, r2, #31
    4496:	d5f9      	bpl.n	448c <clock_init+0xa0>

    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL0) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
    4498:	4b06      	ldr	r3, [pc, #24]	; (44b4 <clock_init+0xc8>)
    449a:	f240 3207 	movw	r2, #775	; 0x307
    449e:	621a      	str	r2, [r3, #32]
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);
    44a0:	685a      	ldr	r2, [r3, #4]
    44a2:	0752      	lsls	r2, r2, #29
    44a4:	d4fc      	bmi.n	44a0 <clock_init+0xb4>

    MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
    44a6:	4b07      	ldr	r3, [pc, #28]	; (44c4 <clock_init+0xd8>)
    44a8:	2201      	movs	r2, #1
    44aa:	715a      	strb	r2, [r3, #5]
}
    44ac:	4770      	bx	lr
    44ae:	bf00      	nop
    44b0:	41004000 	.word	0x41004000
    44b4:	40001c00 	.word	0x40001c00
    44b8:	40001000 	.word	0x40001000
    44bc:	04010000 	.word	0x04010000
    44c0:	00180106 	.word	0x00180106
    44c4:	40000800 	.word	0x40000800

000044c8 <nmain>:
#endif // #ifdef JAKES_CLOCK

void nmain(void) {
    44c8:	b508      	push	{r3, lr}
        raise_LED_pins(); // raise_D13(); raise_D12();
    44ca:	4b03      	ldr	r3, [pc, #12]	; (44d8 <nmain+0x10>)
        // activity_LED_demo();
	while (1) {
            flicker_LED();
    44cc:	4d03      	ldr	r5, [pc, #12]	; (44dc <nmain+0x14>)
            // short_timer();

            // this demo stops everything:
            // USUART_5_demo(); // let's see what the cat drug in
            short_timer();
    44ce:	4c04      	ldr	r4, [pc, #16]	; (44e0 <nmain+0x18>)
        raise_LED_pins(); // raise_D13(); raise_D12();
    44d0:	4798      	blx	r3
            flicker_LED();
    44d2:	47a8      	blx	r5
            short_timer();
    44d4:	47a0      	blx	r4
    44d6:	e7fc      	b.n	44d2 <nmain+0xa>
    44d8:	00004399 	.word	0x00004399
    44dc:	000043c9 	.word	0x000043c9
    44e0:	00004381 	.word	0x00004381

000044e4 <main>:
	}
}

int main(void) {
    44e4:	b508      	push	{r3, lr}
    SystemInit();
    44e6:	4b04      	ldr	r3, [pc, #16]	; (44f8 <main+0x14>)
    44e8:	4798      	blx	r3
    clock_init();
    44ea:	4b04      	ldr	r3, [pc, #16]	; (44fc <main+0x18>)
    44ec:	4798      	blx	r3
    init_act_LED();
    44ee:	4b04      	ldr	r3, [pc, #16]	; (4500 <main+0x1c>)
    44f0:	4798      	blx	r3
    nmain();
    44f2:	4b04      	ldr	r3, [pc, #16]	; (4504 <main+0x20>)
    44f4:	4798      	blx	r3
    44f6:	bf00      	nop
    44f8:	000042a5 	.word	0x000042a5
    44fc:	000043ed 	.word	0x000043ed
    4500:	00004509 	.word	0x00004509
    4504:	000044c9 	.word	0x000044c9

00004508 <init_act_LED>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4508:	4b07      	ldr	r3, [pc, #28]	; (4528 <init_act_LED+0x20>)

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    450a:	4908      	ldr	r1, [pc, #32]	; (452c <init_act_LED+0x24>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    450c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4510:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4512:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4516:	629a      	str	r2, [r3, #40]	; 0x28
    4518:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    451a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    451e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4520:	629a      	str	r2, [r3, #40]	; 0x28
    4522:	4a03      	ldr	r2, [pc, #12]	; (4530 <init_act_LED+0x28>)
    4524:	629a      	str	r2, [r3, #40]	; 0x28
// #include "gpio_local.h"

void init_act_LED(void) {
    gpio_set_pin_direction(PA23, GPIO_DIRECTION_OUT);
    gpio_set_pin_direction(PA16, GPIO_DIRECTION_OUT);
}
    4526:	4770      	bx	lr
    4528:	41008000 	.word	0x41008000
    452c:	c0000080 	.word	0xc0000080
    4530:	c0000001 	.word	0xc0000001

00004534 <raise_D13_metro>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4534:	4b02      	ldr	r3, [pc, #8]	; (4540 <raise_D13_metro+0xc>)
    4536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    453a:	619a      	str	r2, [r3, #24]

void raise_D13_metro(void) { // Metro M4 Express
    gpio_set_pin_level(PA16, true);
}
    453c:	4770      	bx	lr
    453e:	bf00      	nop
    4540:	41008000 	.word	0x41008000

00004544 <raise_D13_feather>:
    4544:	4b02      	ldr	r3, [pc, #8]	; (4550 <raise_D13_feather+0xc>)
    4546:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    454a:	619a      	str	r2, [r3, #24]

void raise_D13_feather(void) { // Feather M4 Express
    gpio_set_pin_level(PA23, true);
}
    454c:	4770      	bx	lr
    454e:	bf00      	nop
    4550:	41008000 	.word	0x41008000

00004554 <lower_D13_metro>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4554:	4b02      	ldr	r3, [pc, #8]	; (4560 <lower_D13_metro+0xc>)
    4556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    455a:	615a      	str	r2, [r3, #20]

void lower_D13_metro(void) {
    gpio_set_pin_level(PA16, false);
}
    455c:	4770      	bx	lr
    455e:	bf00      	nop
    4560:	41008000 	.word	0x41008000

00004564 <lower_D13_feather>:
    4564:	4b02      	ldr	r3, [pc, #8]	; (4570 <lower_D13_feather+0xc>)
    4566:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    456a:	615a      	str	r2, [r3, #20]

void lower_D13_feather(void) {
    gpio_set_pin_level(PA23, false);
}
    456c:	4770      	bx	lr
    456e:	bf00      	nop
    4570:	41008000 	.word	0x41008000

00004574 <__libc_init_array>:
    4574:	b570      	push	{r4, r5, r6, lr}
    4576:	4e0d      	ldr	r6, [pc, #52]	; (45ac <__libc_init_array+0x38>)
    4578:	4c0d      	ldr	r4, [pc, #52]	; (45b0 <__libc_init_array+0x3c>)
    457a:	1ba4      	subs	r4, r4, r6
    457c:	10a4      	asrs	r4, r4, #2
    457e:	2500      	movs	r5, #0
    4580:	42a5      	cmp	r5, r4
    4582:	d109      	bne.n	4598 <__libc_init_array+0x24>
    4584:	4e0b      	ldr	r6, [pc, #44]	; (45b4 <__libc_init_array+0x40>)
    4586:	4c0c      	ldr	r4, [pc, #48]	; (45b8 <__libc_init_array+0x44>)
    4588:	f000 f818 	bl	45bc <_init>
    458c:	1ba4      	subs	r4, r4, r6
    458e:	10a4      	asrs	r4, r4, #2
    4590:	2500      	movs	r5, #0
    4592:	42a5      	cmp	r5, r4
    4594:	d105      	bne.n	45a2 <__libc_init_array+0x2e>
    4596:	bd70      	pop	{r4, r5, r6, pc}
    4598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    459c:	4798      	blx	r3
    459e:	3501      	adds	r5, #1
    45a0:	e7ee      	b.n	4580 <__libc_init_array+0xc>
    45a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    45a6:	4798      	blx	r3
    45a8:	3501      	adds	r5, #1
    45aa:	e7f2      	b.n	4592 <__libc_init_array+0x1e>
    45ac:	000045c8 	.word	0x000045c8
    45b0:	000045c8 	.word	0x000045c8
    45b4:	000045c8 	.word	0x000045c8
    45b8:	000045cc 	.word	0x000045cc

000045bc <_init>:
    45bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45be:	bf00      	nop
    45c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45c2:	bc08      	pop	{r3}
    45c4:	469e      	mov	lr, r3
    45c6:	4770      	bx	lr

000045c8 <__init_array_start>:
    45c8:	00004289 	.word	0x00004289

000045cc <_fini>:
    45cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ce:	bf00      	nop
    45d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45d2:	bc08      	pop	{r3}
    45d4:	469e      	mov	lr, r3
    45d6:	4770      	bx	lr

000045d8 <__fini_array_start>:
    45d8:	00004265 	.word	0x00004265
