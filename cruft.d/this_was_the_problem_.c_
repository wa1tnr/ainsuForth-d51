// Tue Jul 31 14:47:05 UTC 2018

#include "atmel_start.h"
#include "gpio_local.h"

// wa1tnr
//
// ATSAMD51J19A using Atmel Start
//  - working LED Blinkie D13 in under 2 kilobytes of .bin uploaded
// Feather M4 Express and
// Metro M4 Express


/*
 * clock stuff is from Jake Read.
 *
 * mkstepper-v011.c
 *
 * Created: 2/5/2018 12:00:35 PM
 * Author : Jake
 * https://gitlab.cba.mit.edu/jakeread/atkstepper17/tree/e6559372a14fa69ba360da903480d962d786744f
 *
 * https://gitlab.cba.mit.edu/jakeread/atkstepper17/blob/e6559372a14fa69ba360da903480d962d786744f/embedded/mkstepper-v011/mkstepper-v011/main.c
 *
 * TODO: simplify this citation. ;)
 *
 */

/* Many changes: by wa1tnr, July 2018 */

void uSec(void) {
    for (volatile int i = 1; i < 2; i++) { // needs calibration
        // nothing
    }
}

void short_timer(void) { // human blinkie timescale
    uint32_t on_time  = 2140111222; // it's 2147 something ;)
    for(on_time =       2140111; on_time > 0; on_time--) {
        uSec();
    }
}

void vy_short_timer(void) {
    uint32_t vy_time = 2140111; // can be 1,000x this
    for(vy_time =         4111; vy_time > 0; vy_time--) {
        uSec(); // pseudo-microsecond with no magnitude calibration
    }
}

void raise_LED_pins(void) { // multiple target boards
    raise_D13(); raise_D12();
}

void lower_LED_pins(void) {
    lower_D13(); lower_D12();
}

void blink_LED(void) {
    raise_LED_pins();
    short_timer();
    lower_LED_pins();
    short_timer();
}

void flicker_LED(void) {
    raise_LED_pins();
    vy_short_timer();

    lower_LED_pins();
    vy_short_timer();
}

void blinkLEDfast(void) {
    for(int i = 15; i > 0; i--) {
        blink_LED();
    }
}

void activity_LED_demo(void) {
    init_act_LED();
    blinkLEDfast();
}

void flickit(void) {
    flicker_LED();
    vy_short_timer();
    for (int i=9; i>0; i--) {
        short_timer();
    }
}

int nmain(void) {
    // raise_LED_pins(); short_timer(); lower_LED_pins();
    activity_LED_demo();
    lower_LED_pins();
    short_timer();

    while (1) {
        flickit();
        // this'd be recursion if it wasn't a reset?
        NVIC_SystemReset(); // warm boot - lights may modulate as with pushbutton reset?
    }
}

void clock_init(void){ // Jake Read
    NVMCTRL->CTRLA.reg |= NVMCTRL_CTRLA_RWS(0);
    GCLK->CTRLA.bit.SWRST = 1;
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_SWRST);
    GCLK->GENCTRL[3].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL3);
    GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSCULP32K) | GCLK_GENCTRL_GENEN;
    while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);

    OSCCTRL->DFLLCTRLA.reg = 0;
    OSCCTRL->DFLLMUL.reg = OSCCTRL_DFLLMUL_CSTEP(0x1) | OSCCTRL_DFLLMUL_FSTEP(0x1) | OSCCTRL_DFLLMUL_MUL(0);
    while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLMUL);
    OSCCTRL->DFLLCTRLB.reg = 0;
while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_DFLLCTRLB);
OSCCTRL->DFLLCTRLA.reg |= OSCCTRL_DFLLCTRLA_ENABLE;
while(OSCCTRL->DFLLSYNC.reg & OSCCTRL_DFLLSYNC_ENABLE);
OSCCTRL->DFLLCTRLB.reg = OSCCTRL_DFLLCTRLB_WAITLOCK | OSCCTRL_DFLLCTRLB_CCDIS | OSCCTRL_DFLLCTRLB_USBCRM;
while(!OSCCTRL->STATUS.bit.DFLLRDY);

// this is generating a reference for our 120mhz
GCLK->GENCTRL[5].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DFLL_Val) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(24u);
while(GCLK->SYNCBUSY.bit.GENCTRL5);

// setup DPLL0 to 120MHz
GCLK->PCHCTRL[OSCCTRL_GCLK_ID_FDPLL0].reg = (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(GCLK_PCHCTRL_GEN_GCLK5_Val);
OSCCTRL->Dpll[0].DPLLRATIO.reg = OSCCTRL_DPLLRATIO_LDRFRAC(0x00) | OSCCTRL_DPLLRATIO_LDR(59);
while(OSCCTRL->Dpll[0].DPLLSYNCBUSY.bit.DPLLRATIO);
OSCCTRL->Dpll[0].DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK_GCLK | OSCCTRL_DPLLCTRLB_LBYPASS;
OSCCTRL->Dpll[0].DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
while(OSCCTRL->Dpll[0].DPLLSTATUS.bit.CLKRDY == 0 || OSCCTRL->Dpll[0].DPLLSTATUS.bit.LOCK == 0);
// set clock to use dpll0

GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_DPLL0) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
while(GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0);

MCLK->CPUDIV.reg = MCLK_CPUDIV_DIV_DIV1;
}

int main(void) {
    SystemInit();
    clock_init();
    init_act_LED();
    nmain();
    while (1) {
        // none
    }
}
